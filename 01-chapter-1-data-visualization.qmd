---
title: "Chapter 1 - Data Visualisation"
author: "Mardan Mirzaguliyev"
format: html
editor: visual
date: 2023/10/01
---

# Data visualization

```{r}
# load packages
library(tidyverse)
library(palmerpenguins)
library(ggthemes)
```

```{r}
penguins
```

```{r}
# view all variables and the first few observations of each variable
glimpse(penguins)
```

```{r}
# open an interactive data viewer
# View(penguins)
```

```{r}
# open help page of penguins data frame
?penguins
```

## **Creating a ggplot**

```{r}
# create an empty plot
ggplot(data = penguins)
```

```{r}
# add mappings
ggplot(data = penguins, 
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g))
```

```{r}
# add geometrical object
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g)) + geom_point()
```

```{r}
# add aesthetics and layers
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g,
                     color = species)) +
  geom_point()
```

```{r}
# Three smooth lines for three species: species defined as global layer for color
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g,
                     color = species)) + geom_point() +
         geom_smooth(method = "lm")
```

```{r}
# One smooth line for the species: species defined as local layer for color
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g)) + geom_point(mapping = aes(color = species)) +
         geom_smooth(method = "lm")
```

```{r}
# One smooth line for the species: species defined as local layer for color and shape
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g)) + geom_point(mapping = aes(color = species,
                   shape = species)) +
         geom_smooth(method = "lm")
```

```{r warning=FALSE}
# Add labels and improve color pallette to be colorblind safe
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g)) + geom_point(mapping = aes(color = species,
                   shape = species)) +
         geom_smooth(method = "lm") +
  labs(title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)",
    y = "Body mass (g)",
    color = "Species", 
    shape = "Species") +
  scale_color_colorblind()
```

## Exercises

```{r}
# 1
glimpse(penguins)
```

Row: 344

Columns: 8

```{r}
# 2
?penguins
```

bill_depth_mm - a number denoting bill depth (millimeters)

```{r}
# 3
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm,
                     y = bill_depth_mm)) + geom_point(mapping = aes(color = species,
                   shape = species)) +
         geom_smooth(method = "lm") +
  labs(title = "Bill depth and bill length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Bill length (mm)",
    y = "Bill depth (mm)",
    color = "Species", 
    shape = "Species") +
  scale_color_colorblind()
```

There is a negative relationship between bill depth and bill length. As the bill length gets longer bill length gets shorter.

```{r}
# 4
ggplot(data = penguins,
       mapping = aes(x = species,
                     y = bill_depth_mm)) + geom_point(mapping = aes(color = species,
                   shape = species)) +
   labs(title = "Bill depth and species",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Species",
    y = "Bill depth (mm)",
    color = "Species", 
    shape = "Species") +
  scale_color_colorblind()
```

Scatter plots bill lengths for all species. Better choice to visualize this relationship would be bar charts:

```{r}
# 4 - continued
ggplot(data = penguins,
       mapping = aes(x = species,
                     y = bill_depth_mm)) + geom_bar(stat ="identity",                                     mapping = aes(color = species)) +
  labs(title = "Bill depth and species",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Species",
    y = "Bill depth (mm)",
    color = "Species") +
  scale_color_colorblind()
```

```{r}
# 5
# ggplot(data = penguins) + 
#  geom_point()
```

There is no mappings. ggplot does not know what to put in x and y axis.

```{r warning=FALSE}
# 5 - continued
ggplot(data = penguins, 
       mapping = aes(x = bill_length_mm,
                     y = body_mass_g)) + geom_point(mapping = aes(color = species, shape = species)) + 
  geom_smooth(method = "lm") +
   labs(title = "Body mass and bill length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Bill length (mm)",
    y = "Body mass (g)",
    color = "Species",
    shape = "Species") +
  scale_color_colorblind()
```

```{r}
# 6
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g)) + geom_point(mapping = aes(color = species,
                   shape = species), 
                   na.rm = TRUE) +
         geom_smooth(method = "lm", 
                     na.rm = TRUE) +
  labs(title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)",
    y = "Body mass (g)",
    color = "Species", 
    shape = "Species") +
  scale_color_colorblind()
```

na.rm If FALSE, the default, missing values are removed with a warning. If TRUE, missing values are silently removed.

```{r}
# 7
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g)) + geom_point(mapping = aes(color = species,
                   shape = species), 
                   na.rm = TRUE) +
         geom_smooth(method = "lm", 
                     na.rm = TRUE) +
  labs(title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    caption = "Data come from the palmerpenguins package.",
    x = "Flipper length (mm)",
    y = "Body mass (g)",
    color = "Species", 
    shape = "Species") +
  scale_color_colorblind()
```

```{r}
# 8
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g)) + 
  geom_point(aes(color = bill_depth_mm),
              na.rm = TRUE) +
  geom_smooth(method = "lm", 
                    na.rm = TRUE)
```

bill_depth_mm is mapped to color aesthetic at the geom level which is local.

```{r}
# 9
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g, 
                     color = island)) +
  geom_point(na.rm = TRUE) +
  geom_smooth(se = FALSE, na.rm = TRUE)
```

```{r}
# 10
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point() +
  geom_smooth()
```

```{r}
ggplot() +
  geom_point(
    data = penguins,
    mapping = aes(x = flipper_length_mm, y = body_mass_g)
  ) +
  geom_smooth(
    data = penguins,
    mapping = aes(x = flipper_length_mm, y = body_mass_g)
  )
```

They look the same because, what is defined in global level for the first graph is also defined in local level for the second graph.

## ggplot2 calls

```{r}
# the first one or two arguments to a function are so important that you should know them by heart
# the first two arguments to ggplot() are data and mapping
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g)) +
  geom_point()
```

```{r}
ggplot(penguins,
       aes(x = flipper_length_mm,
           y = body_mass_g)) +
  geom_point()
```

```{r}
penguins |> ggplot(aes(x = flipper_length_mm,
                       y = body_mass_g)) + geom_point()
```

## **Visualizing distributions**

### **A categorical variable**

```{r}
# bar chart
ggplot(penguins, aes(x = species)) +
  geom_bar()
```

```{r}
# ordered bar chart
ggplot(penguins, aes(x = fct_infreq(species))) +
  geom_bar()
```

### **A numerical variable**

```{r}
# histogram
ggplot(penguins, aes(x = body_mass_g)) +
  geom_histogram(binwidth = 200)
```

```{r}
ggplot(penguins, aes(x = body_mass_g)) +
  geom_histogram(binwidth = 20)
ggplot(penguins, aes(x = body_mass_g)) +
  geom_histogram(binwidth = 2000)
```

```{r}
# too many bars
# difficult to determine the shape of the distribution
ggplot(penguins, aes(x = body_mass_g)) +
  geom_histogram(binwidth = 20)
```

```{r}
# all data being binned into only three bars
# difficult to determine the shape of the distribution
ggplot(penguins, aes(x = body_mass_g)) +
  geom_histogram(binwidth = 2000)
```

```{r}
# density plot
ggplot(penguins, aes(x = body_mass_g)) +
  geom_density()
```

## Exercises

```{r}
# 1
ggplot(penguins, aes(y = fct_infreq(species))) +
  geom_bar(mapping = aes(fill = species)) + 
  labs(title = "Penguin in Species Palmer Archipelago",
    x = "Numbers of penguins",
    y = "Species",
    fill = "Species") +
  scale_color_colorblind()
```

```{r}
# 2
# a
ggplot(penguins, aes(x = species)) +
  geom_bar(color = "red")
```

```{r}
# b
ggplot(penguins, aes(x = species)) + 
         geom_bar(fill = "red")
```

In this case, fill aesthetic is more useful to change the color of bars.

```{r}
# 3
ggplot(penguins, aes(x = body_mass_g)) +
  geom_histogram(bins = 30)
```

It defines the number of bins. Overridden byÂ `binwidth`. Defaults to 30.

```{r}
# 4
glimpse(diamonds)
```

```{r}
# 4 - continued
unique(diamonds$carat)
```

```{r}
# 4 - continued
ggplot(diamonds, aes(x = carat)) +
  geom_histogram(binwidth = 0.5)
```

## **Visualizing relationships**

### **A numerical and a categorical variable**

```{r}
# box plot
ggplot(penguins, aes(x = species,
                     y = body_mass_g)) +
  geom_boxplot(na.rm = TRUE) +
  labs(x = "Species",
       y = "Body mass (g)")
```

```{r}
# density plot
ggplot(penguins, aes(x = body_mass_g,
                     color = species)) +
  geom_density(linewidth = 0.75, na.rm = TRUE) +
    labs(x = "Body mass (g)",
       y = "Density",
       color = "Species")
```

```{r}
ggplot(penguins, aes(x = body_mass_g,
                     color = species, 
                     fill = species)) +
  geom_density(linewidth = 0.75, 
               alpha = 0.5,
               na.rm = TRUE) +
    labs(x = "Body mass (g)",
       y = "Density",
       color = "Species",
       fill = "Species")
```

### **Two categorical variables**

```{r}
ggplot(penguins, aes(x = island, 
                     fill = species)) +
  geom_bar() +
  labs(title = "Frequencies of each species of penguins on each island",
       x = "Island",
       y = "Frequency",
       fill = "Species")
```

```{r}
ggplot(penguins, aes(x = island, 
                     fill = species)) +
  geom_bar(position = "fill") +
  labs(title = "Relative frequencies of each species of penguins on each island",
       x = "Island",
       y = "Frequency",
       fill = "Species")
```

### **Two numerical variables**

```{r}
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g)) + geom_point(mapping = aes(color = species,
                   shape = species),
                   na.rm = TRUE) +
         geom_smooth(method = "lm",
                     na.rm = TRUE) +
  labs(title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)",
    y = "Body mass (g)",
    color = "Species", 
    shape = "Species") +
  scale_color_colorblind()
```

### **Three or more variables**

```{r}
ggplot(penguins, aes(x = flipper_length_mm, 
                     y = body_mass_g)) +
  geom_point(aes(color = species, 
                 shape = island),
             na.rm = TRUE) +
  geom_smooth(method = "lm",
                     na.rm = TRUE,
              linewidth = 0.5) +
   labs(title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)",
    y = "Body mass (g)",
    color = "Species", 
    shape = "Island") +
  scale_color_colorblind()
```

```{r}
# subplots
ggplot(penguins, aes(x = flipper_length_mm,
                     y = body_mass_g)) +
         geom_point(aes(color = species,
                        shape = species),
                    na.rm = TRUE) +
  geom_smooth(method = "lm",
                     na.rm = TRUE,
              linewidth = 0.5) +
         facet_wrap(~island) +
  labs(title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)",
    y = "Body mass (g)",
    color = "Species", 
    shape = "Species") +
  scale_color_colorblind()
```

## **Exercises**

```{r}
# 1
?mpg
```

**Numerical Variables:**

-   **`cty`**

-   **`hwy`**

-   **`displ`**

-   **`cyl`**

**Categorical Variables:**

-   **`manufacturer`**

-   **`model`**

-   **`year`**

-   **`drv`**

-   **`fl`**

-   **`class`**

```{r}
mpg
```

When when mpg is printed, below the name of the each variable type of the variable is also printed. It shows character, but in the context they can be transformed into factors.

```{r}
# 2

# a - Make a scatterplot of hwy vs. displ using the mpg data frame
ggplot(mpg,
       aes(x = displ,
           y = hwy)) + 
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Highway miles per gallon by engine displacement (l)",
       x = "Engine displacement (l)",
       y = "Highway miles per gallon",
       caption = "Fuel economy data from 1999 to 2008 for 38 popular models of cars") + scale_color_colorblind()
```

```{r}
# b1 - Map a third, numerical variable to color
# as categorical variable
ggplot(mpg,
       aes(x = displ,
           y = hwy,
           color = as_factor(cyl))) + 
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Highway miles per gallon by engine displacement (liter)",
       x = "Engine displacement (liter)",
       y = "Highway miles per gallon",
       color = "Number of cylinders", 
       caption = "Fuel economy data from 1999 to 2008 for 38 popular models of cars")
```

```{r}
# b2
# as numerical variable
ggplot(mpg,
       aes(x = displ,
           y = hwy,
           color = cyl)) + 
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Highway miles per gallon by engine displacement (liter)",
       x = "Engine displacement (liter)",
       y = "Highway miles per gallon",
       color = "Number of cylinders", 
       caption = "Fuel economy data from 1999 to 2008 for 38 popular models of cars")
```

```{r}
# c1 - Map a third, numerical variable to size
# as categorical variable
ggplot(mpg,
       aes(x = displ,
           y = hwy,
           size = as_factor(cyl))) + 
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Highway miles per gallon by engine displacement in litres",
    x = "Engine displacement (l)",
    y = "Highway miles per gallon",
    size = "Number of cylinders",
    caption = "Fuel economy data from 1999 to 2008 for 38 popular models of cars")
```

```{r}
# c2
# as numerical variable
ggplot(mpg,
       aes(x = displ,
           y = hwy,
           size = cyl)) + 
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Highway miles per gallon by engine displacement in litres",
    x = "Engine displacement (l)",
    y = "Highway miles per gallon",
    size = "Number of cylinders",
    caption = "Fuel economy data from 1999 to 2008 for 38 popular models of cars")
```

```{r}
# d1 - Map a third, numerical variable both color and size
# as categorical variable
ggplot(mpg,
       aes(x = displ,
           y = hwy,
           color = as_factor(cyl),
           size = as_factor(cyl))) + 
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Highway miles per gallon by engine displacement in litres",
    x = "Engine displacement (l)",
    y = "Highway miles per gallon",
    color = "Number of cylinders",
    size = "Number of cylinders",
    caption = "Fuel economy data from 1999 to 2008 for 38 popular models of cars")
```

```{r}
# d2
# as numerical variable
ggplot(mpg,
       aes(x = displ,
           y = hwy,
           color = cyl,
           size = cyl)) + 
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Highway miles per gallon by engine displacement in litres",
    x = "Engine displacement (l)",
    y = "Highway miles per gallon",
    color = "Number of cylinders",
    size = "Number of cylinders",
    caption = "Fuel economy data from 1999 to 2008 for 38 popular models of cars")
```

```{r}
# e1 - Map a third, numerical variable to shape
# as categorical variable
ggplot(mpg,
       aes(x = displ,
           y = hwy,
           shape = as_factor(cyl))) + 
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Highway miles per gallon by engine displacement in litres",
    x = "Engine displacement (l)",
    y = "Highway miles per gallon",
    shape = "Number of cylinders",
    caption = "Fuel economy data from 1999 to 2008 for 38 popular models of cars")
```

```{r}
# e2 - Map a third, numerical variable to shape
# as numerical variable
# caueses error
# A continuous variable cannot be mapped to the shape aesthetic
# again categorical
ggplot(mpg,
       aes(x = displ,
           y = hwy,
           as_factor(cyl))) + 
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Highway miles per gallon by engine displacement in litres",
    x = "Engine displacement (l)",
    y = "Highway miles per gallon",
    shape = "Number of cylinders",
    caption = "Fuel economy data from 1999 to 2008 for 38 popular models of cars")
```

```{r}
# 3
ggplot(mpg,
       aes(x = displ,
           y = hwy,
           linewidth = as_factor(cyl))) + 
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Highway miles per gallon by engine displacement in litres",
       x = "Engine displacement (l)",
       y = "Highway miles per gallon",
       linewidth = "Number of cylinders",
       caption = "Fuel economy data from 1999 to 2008 for 38 popular models of cars")
```

```{r}
# 4
ggplot(mpg,
       aes(x = displ,
           y = hwy,
           color = cyl,
           size = cyl)) + 
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Highway miles per gallon by engine displacement in litres",
    x = "Engine displacement (l)",
    y = "Highway miles per gallon",
    color = "Number of cylinders",
    size = "Number of cylinders",
    caption = "Fuel economy data from 1999 to 2008 for 38 popular models of cars")
```

\

```{r}
# 5
# a
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm,
                     y = bill_depth_mm)) + geom_point(mapping = aes(color = species),
                   na.rm = TRUE) +
         geom_smooth(method = "lm",
                     na.rm = TRUE) +
  labs(title = "Bill depth and bill length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Bill length (mm)",
    y = "Bill depth (mm)",
    color = "Species")
```

```{r}
# 5
# b
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm,
                     y = bill_depth_mm)) + geom_point(mapping = aes(color = species),
                   na.rm = TRUE) +
         geom_smooth(method = "lm",
                     na.rm = TRUE) +
  labs(title = "Bill depth and bill length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Bill length (mm)",
    y = "Bill depth (mm)",
    color = "Species") +
  facet_wrap(~species)
```

```{r}
# 6
# One label for two aesthetics
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm,
                     y = bill_depth_mm,
                     color = species,
                     shape = species)) +
  geom_point() +
  labs(color = "Species")
```

```{r}
# Two labes for each
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm,
                     y = bill_depth_mm,
                     color = species,
                     shape = species)) +
  geom_point() +
  labs(color = "Species",
       shape = "Species")
```

```{r}
# 7

ggplot(penguins, aes(x = island,
                     fill = species)) + 
  geom_bar(position = "fill")
```

Question: What is the distribution of the species in the islands?

```{r}
ggplot(penguins, 
       aes(x = species,
           fill = island)) +
  geom_bar(position = "fill")
```

Question: What island do the species live? How are they populated?

## Saving your plots

```{r}
ggplot(penguins,
       aes(x = flipper_length_mm,
           y = body_mass_g)) +
  geom_point()
ggsave(filename = "penguin-plot.png")
```

## Exercises

```{r}
# 1
ggplot(mpg, aes(x = class)) +
  geom_bar()

ggplot(mpg, aes(cty, y = hwy)) +
         geom_point()
ggsave(filename = "plot.png")
```

```{r}
# 2
# a
ggplot(mpg, aes(cty, y = hwy)) +
         geom_point()
ggsave(filename = "plot.pdf")
```

```{r}
# b
?ggsave
```

device

Device to use. Can either be a device function (e.g.Â png), or one of "eps", "ps", "tex" (pictex), "pdf", "jpeg", "tiff", "png", "bmp", "svg" or "wmf" (windows only).
