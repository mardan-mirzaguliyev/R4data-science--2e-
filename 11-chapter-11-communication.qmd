---
title: "Chapter 12 - Communication"
author: "Mardan Mirzaguliyev"
format: html
editor: visual
date: 2023/10/30
---

# Communication

```{r}
library(tidyverse)
library(scales)
library(ggrepel)
library(patchwork)
library(palmerpenguins)
library(ggthemes)
```

## Labels

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
         geom_point(aes(color = class)) +
         geom_smooth(se = FALSE) +
  labs(
    x = "Engine displacement (L)",
    y = "Highway fuel economy (mpg)",
    color = "Car type",
    title = "Fuel efficiency generally decreases with engine size",
    subtitle = "Two seaters (sports cars) are an exception because of their light weight",
    caption = "Data from fueleconomy.gov"
       )
```

It's possible to use mathematical equations instead of text strings. Just switch `""` out for [`quote()`](#0) and read about the available options in [`?plotmath`](#0):

```{r}
df <- tibble(
  x = 1:10,
  y = cumsum(x^2)
)
```

```{r}
ggplot(df, aes(x, y)) +
  geom_point() +
  labs(
    x = quote(x[i]),
    y = quote(sum(x[i] ^ 2, i == 1, n))
  )
```

### Exercises

```{r}
# 1
ggplot(mpg, aes(x = displ, y = cty)) +
         geom_point(aes(color = class,
                        shape = class)
                    ) +
  scale_shape_manual(values = seq(0, 7)) +
         geom_smooth(se = FALSE) +
  labs(
    x = "Engine displacement (L)",
    y = "City fuel economy (mpg)",
    color = "Car type",
    shape = "Car type",
    title = "Fuel efficiency generally decreases with engine size",
    subtitle = "Two seaters (sports cars) are an exception because of their light weight",
    caption = "Data from fueleconomy.gov"
       )
```

```{r}
# 2
ggplot(mpg, aes(x = cty, y = hwy)) +
         geom_point(aes(color = drv,
                        shape = drv)
                    ) +
  labs(
    x = "Highway MPG",
    y = "City MPG",
    color = "Type of drive train",
    shape = "Type of drive train",
       )
```

```{r}
# 3
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g,
                     color = species,
                     shape = species)) + 
  geom_point() +
  labs(x = "Flipper length (mm)",
       y = "Body mass (g)",
       title = "Body mass generally increases with the flipper length", 
       color = "Species", 
       shape = "Species"
       )
```

## Annotations

```{r}
label_info <- mpg |> 
  group_by(drv) |> 
  arrange(desc(displ)) |>
  slice_head(n = 1) |> 
  mutate(
    drive_type = case_when(
      drv == "f" ~ "front-wheel drive",
      drv == "r" ~ "rear-wheel drive",
      drv == "4" ~ "4-wheel drive"
    )
  ) |> 
  select(displ, hwy, drv, drive_type)
```

```{r}
ggplot(mpg, aes(x = displ, 
                y = hwy, 
                color = drv)) +
  geom_point(alpha = 0.3) +
  geom_smooth(se = FALSE) +
  geom_text(
    data = label_info,
    aes(x = displ, y = hwy, label = drive_type),
    fontface = "bold", 
    size = 5, 
    hjust = "right",
    vjust = "bottom"
  ) +
  theme(legend.position = "none")
```

```{r}
ggplot(mpg, aes(x = displ, 
                y = hwy, 
                color = drv)) +
  geom_point(alpha = 0.3) +
  geom_smooth(se = FALSE) +
  geom_label_repel(
    data = label_info,
    aes(x = displ, 
        y = hwy, 
        label = drive_type),
    fontface = "bold", 
    size = 4,
    nudge_y = 2
  ) +
  theme(legend.position = "none")
```

```{r}
potential_outliers <- mpg |> 
  filter(hwy > 40 | (hwy > 20 & displ > 5))
```

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  geom_text_repel(data = potential_outliers,
                  aes(label = model)) +
  geom_point(data = potential_outliers,
             color = "red") +
  geom_point(
    data = potential_outliers,
    color = "red", 
    size = 3, 
    shape = "circle open"
  )
```

```{r}
trend_text <- "Larger engine sizes tend to\nhave lower fuel economy." |> 
  str_wrap(width = 30)
```

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  annotate(
    geom = "label", 
    x = 3.5, 
    y = 38,
    label = trend_text,
    hjust = "left",
    color = "red"
  ) +
  annotate(
    geom = "segment",
    x = 3,
    y = 35,
    xend = 5,
    yend = 25, 
    color = "red",
    arrow = arrow(type = "closed")
  )
```

### Exercises

```{r}
# 1
# Create some sample data
data <- data.frame(x = c(1, 2, 3, 4),
                   y = c(5, 6, 7, 8),
                   label = c("Top Left",
                             "Top Right", 
                             "Bottom Left",
                             "Bottom Right"))

# Create a scatter plot
ggplot(data, aes(x = x, y = y)) +
  geom_point() +
  geom_text(aes(x = c(-Inf, Inf, -Inf, Inf), 
                y = c(Inf, Inf, -Inf, -Inf),
                label = label),
            hjust = c(0, 1, 0, 1), 
            vjust = c(1, 1, 0, 0))
```

```{r}
# 2
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  annotate(
    geom = "label", 
    x = 3.5, 
    y = 38,
    label = trend_text,
    hjust = "left",
    color = "red"
  ) +
  annotate(
    geom = "segment",
    x = 3,
    y = 35,
    xend = 5,
    yend = 25, 
    color = "red",
    arrow = arrow(type = "closed")
  ) +
  annotate(
    geom = "point",
    x = 4,
    y = 25,
    color = "blue",
    size = 15,
    shape = 16
  )
```

```{r}
# 3
# Adding a label to a single facet
ggplot(mpg, aes(x = displ, 
                y = hwy, 
                color = drv)) +
  geom_point(alpha = 0.3) +
  geom_smooth(se = FALSE) +
  geom_text(
    data = label_info |> filter(drv == 4),
    aes(x = displ, y = hwy, label = drive_type),
    fontface = "bold", 
    size = 5, 
    hjust = "right",
    vjust = "bottom"
  ) +
  theme(legend.position = "none") + 
  facet_wrap(~ drv)
```

```{r}
# Different labels in each facet
ggplot(mpg, aes(x = displ, 
                y = hwy, 
                color = drv)) +
  geom_point(alpha = 0.3) +
  geom_smooth(se = FALSE) +
  geom_text(
    data = label_info,
    aes(x = displ, y = hwy, label = drive_type),
    nudge_x = 5,
    nudge_y = 5,
    fontface = "bold", 
    size = 4, 
    hjust = "right",
    vjust = "bottom",
    
  ) +
  theme(legend.position = "none") + 
  facet_wrap(~ drv)
```

```{r}
# 4
ggplot(mtcars, 
       aes(wt, mpg, label = rownames(mtcars))) +
  geom_label(aes(fill = factor(cyl)), 
             color = "white",
             fontface = "bold",
             label.padding = unit(0.30, "lines"),
             lable.r = unit(0.20, "lines"),
             label.size = 0.50
             )
```

The appearance of the background is controlled by the `fill` aesthetics, `label.padding`, `label.r`, `label.size`arguments.

```{r}
# 5
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  annotate(
    geom = "label", 
    x = 3.5, 
    y = 38,
    label = trend_text,
    hjust = "left",
    color = "red"
  ) +
  annotate(
    geom = "segment",
    x = 3,
    y = 35,
    xend = 5,
    yend = 25, 
    color = "red",
    arrow = arrow(angle = 50, 
                  length = unit(0.5, "inches"),
                  ends = "last",
                  type = "open"
                  )
  )

```

-   `angle` - The angle of the arrow head in degrees (smaller numbers produce narrower, pointier arrows). Essentially describes the width of the arrow head.

-   `length` - A unit specifying the length of the arrow head (from tip to base).

-   `ends` - One of "last", "first", or "both", indicating which ends of the line to draw arrow heads.

-   `type` - One of "open" or "closed" indicating whether the arrow head should be a closed triangle.

## Scales

```{r}
# default scales - implicit
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class))
```

```{r}
# default scales - explicit
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  scale_x_continuous() +
  scale_y_continuous() +
  scale_color_discrete()
```

### Axis ticks and legend keys

```{r}
ggplot(mpg, 
       aes(x = displ, y = hwy, color = drv)) +
  geom_point() +
  scale_y_continuous(
    breaks = seq(15, 40, by = 5)
    )
```

```{r}
ggplot(mpg, aes(x = displ, 
                y = hwy, 
                color = drv)) +
  geom_point() +
  scale_x_continuous(labels = NULL) +
  scale_y_continuous(labels = NULL) +
  scale_color_discrete(
    labels = c("4" = "4-wheel", 
               "f" = "front",
               "r" = "rear"))
```

```{r}
ggplot(diamonds, aes(x = price, y = cut)) +
  geom_boxplot(alpha = 0.05) +
  scale_x_continuous(labels = label_dollar())
```

```{r}
ggplot(diamonds, aes(x = price, y = cut)) +
  geom_boxplot(alpha = 0.05) +
  scale_x_continuous(
    labels = label_dollar(
      scale = 1/1000,
      suffix = "K"),
    breaks = seq(1000, 19000, by = 6000)
      )
```

```{r}
ggplot(diamonds, aes(x = cut, fill = clarity)) +
  geom_bar(position = "fill") +
  scale_y_continuous(
    name = "Percentage",
    labels = label_percent()
    )
```

```{r}
presidential |> 
  mutate(id = 33 + row_number()) |> 
  ggplot(aes(x = start, y = id)) +
  geom_point() +
  geom_segment(aes(xend = end, yend = id)) +
  scale_x_date(
    name = NULL, 
    breaks = presidential$start,
    date_labels = "'%y")
```

Note that for the `breaks` argument we pulled out the `start` variable as a vector with `presidential$start` because we can't do an aesthetic mapping for this argument.

Also note that the specification of breaks and labels for date and datetime scales is a little different:

-   `date_labels` takes a format specification, in the same form as `parse_datetime()`.

-   `date_breaks` (not shown here), takes a string like "2 days" or "1 month".

### Legend layout

```{r}
base <- ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class))
```

```{r}
# default position
base + theme(legend.position = "right")
```

```{r}
base + theme(legend.position = "left")
```

```{r}
base + theme(legend.position = "top") +
  guides(color = guide_legend(nrow = 3))
```

```{r}
base + 
  theme(legend.position = "bottom") +
  guides(color = guide_legend(nrow = 3))
```

```{r}
base + 
  theme(legend.position = "none")
```

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth(se = FALSE) +
  theme(legend.position = "bottom") +
  guides(
    color = guide_legend(
      nrow = 2,
      override.aes = list(size = 4) 
      )
    )
```

### Replacing a scale

#### Position scales

```{r}
ggplot(diamonds, aes(x = carat, y = price)) +
  geom_bin2d()
```

```{r}
ggplot(diamonds, 
       aes(x = log10(carat), y = log10(price))) +
  geom_bin2d()
```

```{r}
ggplot(diamonds, aes(x = carat,y = price)) +
  geom_bin2d() +
  scale_x_log10() +
  scale_y_log10()
```

#### Color scale

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv))
```

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv)) +
  scale_color_brewer(palette = "Set1")
```

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv, shape = drv)) +
  scale_color_brewer(palette = "Set1")
```

```{r}
presidential |> 
  mutate(id = 33 + row_number()) |> 
  ggplot(aes(x = start, y = id, color = party)) +
  geom_point() +
  geom_segment(aes(xend = end, yend = id)) +
  scale_color_manual(
    values = c(Republican = "#E81B23",
               Democratic = "#00AEF3"))
```

```{r}
df <- tibble(
  x = rnorm(10000),
  y = rnorm(10000)
)
```

```{r}
ggplot(df, aes(x, y)) +
  geom_hex() +
  coord_fixed() +
  labs(
    title = "Default, continuous", 
    x = NULL,
    y = NULL)
```

```{r}
ggplot(df, aes(x, y)) +
  geom_hex() +
  coord_fixed() +
  scale_fill_viridis_c()
  labs(
    title = "Viridis, continuous", 
    x = NULL,
    y = NULL)
```

```{r}
ggplot(df, aes(x, y)) +
  geom_hex() +
  coord_fixed() +
  scale_fill_viridis_b()
  labs(
    title = "Viridis, binned", 
    x = NULL,
    y = NULL)
```

### Zooming

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv)) +
  geom_smooth()
```

```{r}
# filtered
mpg |> 
  filter(displ >= 5 & displ <= 6 & 
           hwy >= 10 & hwy <= 25) |> 
  ggplot(aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv)) +
  geom_smooth()
```

Let's compare these to the two plots below where the plot on the left sets the `limits` on individual scales and the plot on the right sets them in [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html). We can see that reducing the limits is equivalent to subsetting the data. Therefore, to zoom in on a region of the plot, it's generally best to use [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html).

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv)) +
  geom_smooth() +
  scale_x_continuous(limits = c(5, 6)) +
  scale_y_continuous(limits = c(10, 25))
```

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv)) +
  geom_smooth() +
  coord_cartesian(
    xlim = c(5, 6), 
    ylim = c(10, 25)
    )
```

On the other hand, setting the `limits` on individual scales is generally more useful if you want to *expand* the limits, e.g., to match scales across different plots. For example, if we extract two classes of cars and plot them separately, it's difficult to compare the plots because all three scales (the x-axis, the y-axis, and the color aesthetic) have different ranges.

```{r}
suv <- mpg |> filter(class == "suv")
compact <- mpg |> filter(class == "compact")
```

```{r}
ggplot(suv, 
       aes(x = displ, y = hwy, color = drv)) +
  geom_point()
```

```{r}
ggplot(compact, 
       aes(x = displ, y = hwy, color = drv)) +
  geom_point()
```

```{r}
x_scale <- scale_x_continuous(
  limits = range(mpg$displ)
  )
y_scale <- scale_y_continuous(
  limits = range(mpg$hwy)
)
col_scale <- scale_color_discrete(
  limits = unique(mpg$drv)
)
```

```{r}
ggplot(suv, 
       aes(x = displ, y = hwy, color = drv)) +
  geom_point() +
  x_scale +
  y_scale +
  col_scale
```

```{r}
ggplot(compact, 
       aes(x = displ, y = hwy, color = drv)) +
  geom_point() +
  x_scale +
  y_scale +
  col_scale
```

### Exercises

```{r}
# 1
df <- tibble(
  x = rnorm(10000),
  y = rnorm(10000)
)
```

```{r}
ggplot(df, aes(x, y)) +
  geom_hex() +
  scale_color_gradient(low = "white",
                       high = "red") +
   coord_fixed()
```

**`geom_hex()`** doesn't use the **`color`** aesthetic. Instead, it uses the **`fill`** aesthetic to represent the counts of observations in each hexagon.

```{r}
ggplot(df, aes(x, y)) +
  geom_hex() +
  scale_fill_gradient(low = "white",
                       high = "red") +
   coord_fixed()
```

```{r}
# 2
```

..., - Arguments passed on to [continuous_scale](https://ggplot2.tidyverse.org/reference/continuous_scale.html)

scale_colour_gradient(

-   ...,

-   low = "#132B43",

-   high = "#56B1F7",

-   space = "Lab",

-   na.value = "grey50",

-   guide = "colourbar",

-   aesthetics = "colour"

)

..., - A list of new name-value pairs. The name should be an aesthetic.

labs(

-   ...,

-   title = waiver(),

-   subtitle = waiver(),

-   caption = waiver(),

-   tag = waiver(),

-   alt = waiver(),

-   alt_insight = waiver()

)

```{r}
# 3
# a
presidential |> 
  mutate(id = 33 + row_number()) |> 
  ggplot(
    aes(
      x = start, 
      y = id, 
      color = party,
      shape = name)
    ) +
  geom_point() +
  geom_segment(aes(xend = end, yend = id)) +
  scale_x_date(
    date_breaks = "6 years",
    date_labels = "%Y") +
  scale_color_manual(
    values = c(Republican = "#E81B23",
               Democratic = "#00AEF3")
    ) +
  scale_shape_manual(
    values = seq(0, 12)
    )
```

```{r}
# b
presidential |> 
  mutate(id = 33 + row_number()) |> 
  ggplot(
    aes(
      x = start, 
      y = id, 
      color = party,
      shape = name)
    ) +
  geom_point() +
  geom_segment(aes(xend = end, yend = id)) +
  scale_x_date(
    date_breaks = "6 years",
    date_labels = "%Y") +
  scale_y_continuous(
    name = "President Id",
    breaks = 
      seq(34, 45, by = 1)) +
  scale_color_manual(
    values = c(Republican = "#E81B23",
               Democratic = "#00AEF3")
    ) +
  scale_shape_manual(
    values = seq(0, 12)
    )
```

```{r}
# c
presidential |> 
  mutate(id = 33 + row_number()) |> 
  ggplot(
    aes(
      x = start, 
      y = id, 
      color = party,
      label = name)
    ) +
  geom_point() +
  geom_segment(aes(xend = end, yend = id)) +
  geom_text(vjust = -0.5, hjust = 0, size = 3) +
  scale_x_date(
    date_breaks = "6 years",
    date_labels = "%Y") +
  scale_y_continuous(
    name = "President Id",
    breaks = 
      seq(34, 45, by = 1)) +
  scale_color_manual(
    values = c(Republican = "#E81B23",
               Democratic = "#00AEF3")
    )
```

```{r}
# d
presidential |> 
  mutate(id = 33 + row_number()) |> 
  ggplot(
    aes(
      x = start, 
      y = id, 
      color = party,
      label = name)
    ) +
  geom_point() +
  geom_segment(aes(xend = end, yend = id)) +
  geom_text(vjust = -0.5, hjust = 0, size = 3) +
  scale_x_date(
    date_breaks = "6 years",
    date_labels = "%Y") +
  scale_y_continuous(
    breaks = 
      seq(34, 45, by = 1)) +
  scale_color_manual(
    values = c(Republican = "#E81B23",
               Democratic = "#00AEF3")
    ) +
  labs(x = "Terms",
       y = "Order of terms")
```

```{r}
# e
presidential |> 
  mutate(id = 33 + row_number()) |> 
  ggplot(
    aes(
      x = start, 
      y = id, 
      color = party,
      label = name)
    ) +
  geom_point() +
  geom_segment(aes(xend = end, yend = id)) +
  geom_text(vjust = -0.5, hjust = 0, size = 3) +
  scale_x_date(
    date_breaks = "4 years",
    date_labels = "%y") +
  scale_y_continuous(
    breaks = 
      seq(34, 45, by = 1)) +
  scale_color_manual(
    values = c(Republican = "#E81B23",
               Democratic = "#00AEF3")
    ) +
  labs(x = "Terms",
       y = "Order of terms",
       color = "Party")
```

```{r}
# 4
ggplot(diamonds, aes(x = carat, y = price)) +
  geom_point(aes(color = cut), alpha = 1/20)
```

```{r}
ggplot(diamonds, aes(x = carat, y = price)) +
  geom_point(aes(color = cut),
             alpha = 1/20) +
  guides(
    color = guide_legend(
      nrow = 2,
      override.aes = list(size = 4, 
                          alpha = 0.5) 
      )
    )
```

## Themes

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth(se = FALSE) +
  theme_bw()
```

```{r}
ggplot(mpg, 
       aes(x = displ, y = hwy, color = drv)) +
  geom_point() +
  labs(
    title = "Larger engine sizes tend to have lower fuel economy",
    source = "Source: https://fueleconomy.gov."
  ) +
  theme(
    legend.position = c(0.6, 0.6),
    legend.direction = "horizontal",
    legend.background = 
      element_rect(color = "black"),
    plot.title = element_text(face = "bold"),
    plot.title.position = "plot",
    plot.caption.position = "plot",
    plot.caption = element_text(hjust = 0)
  )
```

### Exercises

```{r}
# 1
presidential |> 
  mutate(id = 33 + row_number()) |> 
  ggplot(
    aes(
      x = start, 
      y = id, 
      color = party,
      label = name)
    ) +
  geom_point() +
  geom_segment(aes(xend = end, yend = id)) +
  geom_text(vjust = -0.5, hjust = 0, size = 3) +
  scale_x_date(
    date_breaks = "4 years",
    date_labels = "%y") +
  scale_y_continuous(
    breaks = 
      seq(34, 45, by = 1)) +
  scale_color_manual(
    values = c(Republican = "#E81B23",
               Democratic = "#00AEF3")
    ) +
  labs(x = "Terms",
       y = "Order of terms",
       color = "Party") +
  theme_economist()
```

```{r}
# 2
presidential |> 
  mutate(id = 33 + row_number()) |> 
  ggplot(
    aes(
      x = start, 
      y = id, 
      color = party,
      label = name)
    ) +
  geom_point() +
  geom_segment(aes(xend = end, yend = id)) +
  geom_text(vjust = -0.5, hjust = 0, size = 3) +
  scale_x_date(
    date_breaks = "4 years",
    date_labels = "%y") +
  scale_y_continuous(
    breaks = 
      seq(34, 45, by = 1)) +
  scale_color_manual(
    values = c(Republican = "#E81B23",
               Democratic = "#00AEF3")
    ) +
  labs(x = "Terms",
       y = "Order",
       color = "Party") +
  theme_wsj() +
  theme(
    axis.title.x = element_text(
      color = "blue",
      face = "bold"),
    axis.title.y = element_text(
      color = "blue",
      face = "bold")
    )
```

## Layout

```{r}
p1 <- ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  labs(title = "Plot 1")
```

```{r}
p2 <- ggplot(mpg, aes(x = drv, y = hwy)) +
  geom_boxplot() +
  labs(title = "Plot 2")
```

```{r}
p1 + p2
```

```{r}
p3 <- ggplot(mpg, aes(x = cty, y = hwy)) +
  geom_point() +
  labs(title = "Plot 3")
```

```{r}
(p1 | p3) / p2
```

```{r}
p1 <- ggplot(mpg, aes(
  x = drv,
  y = cty,
  color = drv)) +
  geom_boxplot(show.legend = FALSE) +
  labs(title = "Plot 1")
```

```{r}
p2 <- ggplot(mpg, aes(
  x = drv,
  y = hwy,
  color = drv)) +
  geom_boxplot(show.legend = FALSE) +
  labs(title = "Plot 2")
```

```{r}
p3 <- ggplot(mpg, aes(
  x = cty,
  color = drv,
  fill = drv)
  ) +
  geom_density(alpha = 0.5) +
  labs(title = "Plot 3")
```

```{r}
p4 <- ggplot(mpg, aes(
  x = hwy, 
  color = drv,
  fill = drv
  )) + 
  geom_density(alpha = 0.5) + 
  labs(title = "Plot 4")
```

```{r}
p5 <- ggplot(mpg, aes(
  x = cty, 
  y = hwy,
  color = drv
  )) +
  geom_point(show.legend = FALSE) +
  facet_wrap(~drv) +
  labs(title = "Plot 5")
```

```{r}
(guide_area() / (p1 + p2) / (p3 + p4) / p5) +
  plot_annotation(
    title = "City and highway mileage for cars with different drive trains",
    caption = "Source: https://fueleconomy.gov."
  ) +
  plot_layout(
    guides = "collect",
    heights = c(1, 3, 3, 4)
  ) & theme(legend.position = "top")
```

```{r}
# 1
p1 <- ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  labs(title = "Plot 1")

p2 <- ggplot(mpg, aes(x = drv, y = hwy)) +
  geom_boxplot() +
  labs(title = "Plot 2")

p3 <- ggplot(mpg, aes(x = cty, y = hwy)) +
  geom_point() +
  labs(title = "Plot 3")
```

```{r}
(p1 | p2) / p3
```

```{r}
# Omiting the parentheses
p1 | p2 / p3
```

-   Parentheses are used to group the plots together on one. line.

-   Backslash is used to place the plot on a new line.

-   In the above example when parentheses are omitted second and third plots are top and bottom plots respectively and they both in one line with the first plot.

```{r}
# 2
p1 / (p2 | p3)
```
