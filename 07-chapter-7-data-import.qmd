---
title: "Chapter 7 - Data import"
author: "Mardan Mirzaguliyev"
format: html
editor: visual
date: 2023/10/14
---

# **Data import**

```{r}
library(tidyverse)
library(arrow)
```

## **Reading data from a file**

```{r}
# from local folder
students <- read_csv("data/students.csv")
students
```

```{r}
# from URL
students <- read_csv("https://pos.it/r4ds-students-csv")
students
```

## Practical advise

```{r}
students
```

```{r}
# NA values
students <- read_csv("data/students.csv", 
                     na = c("N/A", ""))
students
```

```{r}
students <- read_csv("https://pos.it/r4ds-students-csv")

students |> 
  rename(
    student_id = `Student ID`,
    full_name = `Full Name`
  )
```

```{r}
students <- read_csv("https://pos.it/r4ds-students-csv")

students |> 
  janitor::clean_names()
```

```{r}
students <- read_csv("https://pos.it/r4ds-students-csv")

students |> 
  janitor::clean_names() |> 
  mutate(meal_plan = factor(meal_plan))
```

```{r}
students <- read_csv("https://pos.it/r4ds-students-csv")

students <- students |> 
  janitor::clean_names() |> 
  mutate(
    meal_plan = factor(meal_plan),
    age = parse_number(if_else(
      age == "five", "5", age))
  )
students
```

## **Other arguments**

```{r}
# read text strings that created and formatted like a CSV file
read_csv(
  "a,b,c
  1,2,3
  4,5,6"
)
```

```{r}
# use skip = n to skip the first n lines
# use comment = "#" to drop all lines that start with (e.g.) #
read_csv(
"The first line of metadata
The second line of metadata
x,y,z
1,2,3",
skip = 2)
```

```{r}
read_csv(
  "# A comment I want to skip
  x,y,z
  1,2,3",
  comment = "#"
)
```

```{r}
# label column names sequentially from X1 to Xn
read_csv(
  "1,2,3
  4,5,6",
  col_names = FALSE
)
```

```{r}
# pass col_names a character vector as the column names
read_csv(
  "1,2,3
  4,5,6",
  col_names = c("x", "y", "z")
)
```

## Exercises

```{r}
# 1
read_delim(
"1|2|3
4|5|6",
col_names = c("x", "y", "z"),
delim = "|"
  )
```

```{r}
# 2
# All arguments are the same for these functions
```

```{r}
# 3
fwf_sample <- readr_example("fwf-sample.txt")
```

```{r}
# You can specify column positions in several ways:
# 1. Guess based on position of empty columns
read_fwf(
  fwf_sample, 
         fwf_empty(fwf_sample, 
                   col_names = c("first", 
                                 "last", 
                                 "state",
                                 "ssn"))
  )
```

```{r}
# 2. A vector of field widths
read_fwf(fwf_sample,
         fwf_widths(c(20, 10, 12),
                    c("name", "state", "ssn")))
```

```{r}
# 3. Paired vectors of start and end positions
read_fwf(fwf_sample, 
         fwf_positions(c(1, 30), 
                       c(20, 42), 
                       c("name", "ssn")))
```

```{r}
# 4. Named arguments with start and end positions
read_fwf(fwf_sample, fwf_cols(name = c(1, 20),
                              ssn = c(30, 42)))
```

```{r}
# 5. Named arguments with column widths
read_fwf(fwf_sample, fwf_cols(name = 20, 
                              state = 10,
                              ssn = 12))
```

-   `file` - path to the file

-   `col_positions` - positions of the columns: Can be specified the below helper functions

-   `fwf_empty()` - Guesses based on the positions of empty columns.

-   `fwf_widths()` - Supply the widths of the columns.

-   `fwf_positions()` - Supply paired vectors of start and end positions.

-   `fwf_cols()` - Supply named arguments of paired start and end positions or column widths.

```{r}
# 4
# a
read_csv("x,y\n1,'a,b'")
```

```{r}
# b
read_csv("x,y\n1,'a,b'", quote = "'")
```

```{r}
# 5
```

```{r}
# a
read_csv("a,b\n1,2,3\n4,5,6")
```

```{r}
read_csv("a,b,c\n1,2,3\n4,5,6")
```

```{r}
# b
read_csv("a,b,c\n1,2\n1,2,3,4")
```

```{r}
read_csv("a,b,c\n1,2,1,\n2,3,4")
```

```{r}
# c
read_csv("a,b\n\"1")
```

```{r}
read_csv("a,b\n\'1'", quote = "'")
```

```{r}
# d
read_csv("a,b\n1,2\na,b")
```

```{r}
# e
read_csv("a;b\n1;3")
```

```{r}
read_csv("a,b\n1,3")
```

```{r}
read_csv2("a;b\n1;3")
```

```{r}
# 6
annoying <- tibble(
  `1` = 1:10,
  `2` = `1` * 2 + rnorm(length(`1`))
)
```

```{r}
# a
annoying$`1`
```

```{r}
annoying[, 1]
```

```{r}
# b
annoying |> 
  ggplot(aes(x = `1`, y = `2`)) +
  geom_point()
```

```{r}
# c
annoying |> 
  mutate(`3` = `2` / `1`)
```

```{r}
# d
annoying |> 
  mutate(`3` = `2` / `1`) |>
  rename(one = `1`,
         two = `2`,
         three = `3`)
```

## **Controlling column types**

### **Guessing types**

```{r}
read_csv("
         logical,numeric,date,string
         TRUE,1,2021-01-15,abc
         false,4.5,2021-02-15,def
         T,Inf,2021-02-16,ghi
         ")
```

### **Missing values, column types, and problem**

```{r}
simple_csv <- "
x
10
.
20
30"
```

```{r}
read_csv(simple_csv)
```

```{r}
df <- read_csv(
  simple_csv,
  col_types = list(x = col_double())
)
```

```{r}
problems(df)
```

```{r}
read_csv(simple_csv, na = ".")
```

### **Column types**

```{r}
another_csv <- "
x,y,z
1,2,3"
```

```{r}
read_csv(
  another_csv,
  col_types = cols(.default = col_character())
)
```

```{r}
read_csv(
  another_csv,
  col_types = cols_only(x = col_character())
)
```

## **Reading data from multiple files**

```{r}
sales_files <- c("data/01-sales.csv",
                 "data/02-sales.csv",
                 "data/03-sales.csv")
```

```{r}
# read downloaded files
read_csv(sales_files, id = "file")
```

```{r}
# read from URL
sales_files <- c(
  "https://pos.it/r4ds-01-sales",
  "https://pos.it/r4ds-02-sales",
  "https://pos.it/r4ds-03-sales"
)

read_csv(sales_files, id = "file")
```

```{r}
# find the files by matching a pattern in the file names
sales_files <- list.files("data", 
                        pattern = "sales\\.csv$",
                        full.names = TRUE
                        )
sales_files
```

## **Writing to a file**

```{r}
write_csv(students, "data/students.csv")
```

```{r}
students
```

```{r}
write_csv(students, "data/students-2.csv")
```

```{r}
read_csv("data/students-2.csv")
```

```{r}
# Alternatives
write_rds(students, "data/students.rds")
```

```{r}
read_rds("data/students.rds")
```

```{r}
write_parquet(students, "data/students.parquet")
```

```{r}
read_parquet("data/students.parquet")
```

## Data entry

```{r}
# tibble() works by column
tibble(
  x = c(1, 2, 5),
  y = c("h", "m", "g"),
  z = c(0.08, 0.83, 0.60)
)
```

```{r}
# tribble(), short for transposed tibble, lays out data row by row
tribble(
  ~x, ~y, ~z,
  1, "h", 0.08,
  2, "m", 0.83,
  5, "g", 0.60
)

```
