---
title: "Chapter 25 - Functions Part 2"
author: "Mardan Mirzaguliyev"
format: html
editor: visual
date: 2024/01/15
---

```{r}
library(tidyverse)
library(nycflights13)
```

## Plot functions

```{r}
diamonds |> 
  ggplot(aes(x = carat)) +
  geom_histogram(binwidth = 0.1)
```

```{r}
diamonds |> 
  ggplot(aes(x = carat)) +
  geom_histogram(binwidth = 0.05)
```

```{r}
histogram <- function(
    df,
    var,
    binwidth = NULL
) {
  df |> ggplot(aes(x = {{ var }})) +
    geom_histogram(binwidth = binwidth)
}
```

```{r}
diamonds |> histogram(carat, 0.1)
```

```{r}
diamonds |> 
  histogram(carat, 0.1) +
  labs(
    x = "Size (in carats)", 
    y = "Number of diamonds"
    )
```

### More variables

```{r}
# https://twitter.com/tyler_js_smith/status/1574377116988104704
linearity_check <- function(df, x, y) {
  df |> 
    ggplot(
      aes(
      x = {{ x }},
      y = {{ y }}
      )
      ) +
    geom_point() +
    geom_smooth(
      method = "loess", 
      formula = y ~ x,
      color = "red",
      se = FALSE
        ) +
    geom_smooth(
      method = "lm", 
      formula = y ~ x,
      color = "blue",
      se = FALSE
        )
}
```

```{r}
starwars |> 
  filter(mass < 1000) |> 
  linearity_check(mass, height)
```

```{r}
# https://twitter.com/ppaxisa/status/1574398423175921665
hex_plot <- function(
    df, 
    x, 
    y, 
    z, 
    bins = 20,
    fun = "mean"
) {
  df |> 
    ggplot(
      aes(
        x = {{ x }},
        y = {{ y }},
        z = {{ z }}
        )
    ) +
    stat_summary_hex(
      # make border same color as fill
      aes(color = after_scale(fill)),
      bins = bins,
      fun = fun 
    )
}
```

```{r}
diamonds |> hex_plot(carat, price, depth)
```

### Combining with other tidyverse

We have to use a new operator here, `:=` (commonly referred to as the “walrus operator”), because we are generating the variable name based on user-supplied data. Variable names go on the left hand side of `=`, but R’s syntax doesn’t allow anything to the left of `=` except for a single literal name. To work around this problem, we use the special operator `:=` which tidy evaluation treats in exactly the same way as `=`.

```{r}
sorted_bars <- function(df, var) {
  df |> 
    # walrus operator
    mutate({{ var }} := 
             fct_rev(fct_infreq({{ var }}))) |> 
    ggplot(aes(y = {{ var }})) +
    geom_bar()
}
```

```{r}
diamonds |> sorted_bars(clarity)
```

```{r}
conditional_bars <- 
  function(df, condition, var) {
    df |> 
      filter({{ condition }}) |> 
      ggplot(aes(x = {{ var }})) +
      geom_bar()
      }
```

```{r}
diamonds |> conditional_bars(
  cut == "Good", 
  clarity
  )
```

```{r}
df <- tibble(
  dist1 = sort(rnorm(100, 5, 2)), 
  dist2 = sort(rnorm(100, 8, 3)),
  dist4 = sort(rnorm(100, 15, 1)),
  date = seq.Date(
    from = ymd("2022-01-01"), 
    ymd("2022-04-10"), by = "day"
    )
)

df
```

```{r}
df <- pivot_longer(
  df, 
  cols = -date, 
  names_to = "dist_name", 
  values_to = "value"
  )

df
```

```{r}
fancy_ts <- function(df, val, group) {
  labs <- df |> 
    group_by({{ group }}) |> 
    summarize(breaks = max({{ val }}))
  
  ggplot(
  df,
  aes(
    x = date,
    y = {{ val }},
    group = {{ group }},
    color = {{ group }}
  )
  ) +
  geom_path() +
  scale_y_continuous(
    breaks = labs$breaks, 
    minor_breaks = NULL
  ) +
  theme_minimal()
  }
```

```{r}
df |> fancy_ts(value, dist_name)
```

### Labeling

```{r}
histogram <- function(
    df, 
    var, 
    binwidth = NULL
) {
  df |> 
    ggplot(aes(x = {{ var }})) +
    geom_histogram(binwidth = binwidth)
}
```

```{r}
histogram <- function(
    df,
    var,
    binwidth
) {
  label <- rlang::englue(
"A histogram of {{ var }} with binwidth 
{binwidth}"
    )
  
  df |> 
    ggplot(aes(x = {{ var }})) +
    geom_histogram(binwidth = binwidth) +
    labs(title = label)
}
```

```{r}
diamonds |> histogram(carat, 0.1)
```

### Exercises

```{r}
# 1
scatter_plot1 <- function(df, x, y) {
  df |> 
    ggplot(
      aes(
        x = {{ x }},
        y = {{ y }}
      )
    ) +
    geom_point(color = "blue")
}
```

```{r}
mpg |> scatter_plot1(cty, hwy)
```

```{r}
# 2
scatter_plot2 <- function(df, x, y) {
  df |> 
    ggplot(
      aes(
        x = {{ x }},
        y = {{ y }}
      )
    ) +
    geom_point(color = "blue") +
    geom_smooth(
      method = "lm", 
      formula = y ~ x,
      color = "red",
      se = FALSE
      )
}
```

```{r}
mpg |> scatter_plot2(cty, hwy)
```

```{r}
# 3
scatter_plot3 <- function(df, x, y) {
    label <- rlang::englue(
"A scatter displaying the relationship between {{ x }} and {{ y }} "
    )
    
  df |> 
    ggplot(
      aes(
        x = {{ x }},
        y = {{ y }}
      )
    ) +
    geom_point(color = "blue") +
    geom_smooth(
      method = "lm", 
      formula = y ~ x,
      color = "red",
      se = FALSE
      ) +
    labs(title = label)
}
```

```{r}
mpg |> scatter_plot3(cty, hwy)
```

## Style

Generally, function names should be verbs, and arguments should be nouns. There are some exceptions: nouns are ok if the function computes a very well known noun (i.e. [`mean()`](https://rdrr.io/r/base/mean.html) is better than `compute_mean()`), or accessing some property of an object (i.e. [`coef()`](https://rdrr.io/r/stats/coef.html) is better than `get_coefficients()`). Use your best judgement and don’t be afraid to rename a function if you figure out a better name later.

```{r}
# Missing extra two spaces
density <- function(
    color,
    facets,
    binwidth = 0.1
) {
diamonds |> 
    ggplot(
      aes(x = carat,
          y = after_stat(density),
          color = {{ color }}
          )
    ) +
    geom_freqpoly(binwidth = binwidth) +
    facet_wrap(vars({{ facets }}))
}
```

```{r}
# Pipe indented incorrectly
density <- function(
    color, 
    facets, 
    binwidth = 0.1
) {
  diamonds |> 
  ggplot(
    aes(
      x = carat, 
      y = after_stat(density),
      color = {{ color }}
      )
    ) +
    geom_freqpoly(binwidth = binwidth) +
    facet_wrap(vars({{ facets }}))
}
```

### Exercises

```{r}
# 1
# a
f1 <- function(string, prefix) {
  str_sub(
    string, 
    1, 
    str_length(prefix)) == prefix
}
```

```{r}
my_string <- "Mardan MurdMan"
prefix <- "M"
```

```{r}
f1(my_string, prefix)
```

```{r}
# Better name
check_prefix <- function(string, prefix) {
  str_sub(
    string, 
    1, 
    str_length(prefix)) == prefix
}
```

```{r}
check_prefix(my_string, prefix)
```

```{r}
# b
f3 <- function(x, y) {
  rep(y, length.out = length(x))
}
```

```{r}
x <- 1:10
y = 6:11
```

```{r}
f3(x, y)
```

```{r}
# Better name
fill_vector <- function(x, y) {
  rep(y, length.out = length(x))
}
```

```{r}
fill_vector(x, y)
```

```{r}
# 2
lm_scatter_plot <- function(df, x, y) {
    label <- rlang::englue(
"A scatter displaying the relationship between {{ x }} and {{ y }} "
    )
    
  df |> 
    ggplot(
      aes(
        x = {{ x }},
        y = {{ y }}
      )
    ) +
    geom_point(color = "blue") +
    geom_smooth(
      method = "lm", 
      formula = y ~ x,
      color = "red",
      se = FALSE
      ) +
    labs(title = label)
}
```

```{r}
mpg |> lm_scatter_plot(cty, hwy)
```

```{r}
filter_severe <- function(df) {
  df |> 
    filter(is.na(arr_time) | dep_delay > 60) |> 
    select(flight, arr_time, dep_delay)
}
```

```{r}
filter_cancelled <- function(df) {
  df |> 
    filter(is.na(arr_time)) |> 
    select(flight, arr_time)
}
```

```{r}
# 3
```

**`rnorm()`**:

**Purpose:** Generates random numbers from a normal distribution.

```{r}
# Generate 10 random numbers with mean 50 and standard deviation = 10
random_numbers <- rnorm(10, mean = 50, sd = 10)
random_numbers
```

```{r}
# Visualize the distribution of random numbers
hist(
  random_numbers, 
  main = "Histogram of random numbers",
  xlab = "Value"
  )
```

**`dnorm()`:**

**Purpose:** Calculates the probability density function (PDF) of the normal distribution for given values.

```{r}
# Calculate density at x = 0 with mean = 0 and standard deviation = 1 (standard normal distribution)
dnorm(0)
```

```{r}
# Calculate densities for multiple values
x <- seq(-3, 3, by = 0.1)
x
```

```{r}
densities <- dnorm(x)
densities
```

```{r}
# Visualize the density curve
plot(
  x, 
  densities, 
  type = "l",
  xlab = "x",
  ylab = "Density"
  )
```

**Key points:**

-   Both functions use the mean (`mean`) and standard deviation (`sd`) parameters to specify the normal distribution.

-   `dnorm` produces density values, while `rnorm` generates random numbers.

-   Visualizations help you understand the shape and characteristics of the normal distribution.
