---
title: "Chapter 4 - Data transformation"
author: "Mardan Mirzaguliyev"
format: html
editor: visual
date: 2023/10/05
---

# Data transformation

## Introduction

```{r}
library(tidyverse)
library(nycflights13)
library(Lahman)
```

```{r}
flights
```

```{r}
# View data frame in interactive mode
# View(flights)
```

```{r}
# print all the columns of data frame
print(flights, width = Inf)
```

```{r}
glimpse(flights)
```

## dplyr basics

```{r}
flights |>
  filter(dest == "IAH") |>
  group_by(year, month, day) |>
  summarize(
    arr_delay = mean(arr_delay, na.rm = TRUE)
  )
```

```{r}
flights |>
  filter(dest == "IAH") |> 
  group_by(year, month, day) |> 
  summarize(
    arr_delay = mean(arr_delay, na.rm = TRUE)
  )
```

### Rows

#### `filter()`

```{r}
flights |> filter(dep_delay > 120)
```

```{r}
# Flights that departed on January 1

flights |> 
  filter(month == 1 & day == 1)
```

```{r}
# Flights that departed in January or February

flights |>
  filter(month == 1 | month == 2)
```

```{r}
# A shorter way to select flights that departed in January or February

flights |>
  filter(month %in% c(1, 2))
```

```{r}
# Save the result
jan1 <- flights |> 
  filter(month == 1 & day == 1)
```

```{r}
# Common mistakes
## using = instead of == when testing for equality

# flights |>
#  filter(month = 1)

#> Error in `filter()`:
#> ! We detected a named input.
#> ℹ This usually means that you've used `=` instead of `==`.
#> ℹ Did you mean `month == 1`?
```

```{r}
## writing “or” statements like in English
flights |>
  filter(month == 1 | 2)
```

#### `arrange()`

```{r}
# default order - ascending
flights |>
  arrange(year, month, day, dep_time)
```

```{r}
# descending order
flights |>
  arrange(desc(dep_delay))
```

#### `distinct()`

```{r}
# Remove duplicate rows, if any
flights |>
  distinct()
```

```{r}
# Find all unique origin and destination pairs
flights |>
  distinct(origin, dest)
```

```{r}
# Keep other columns too
flights |>
  distinct(origin, dest, .keep_all = TRUE)
```

```{r}
# The number of occurrences
# Default sorting is descending in this case
flights |>
  count(origin, dest, sort = TRUE)
```

#### Exercises

```{r}
# 1
# a
glimpse(flights)
```

```{r}
# a
flights |>
  filter(arr_delay >= 120)
```

```{r}
# b
flights |> 
  filter(dest == "IAH" | dest == "HOU")
```

```{r}
# c
unique(flights$carrier)
```

```{r}
# c
flights |> 
  filter(carrier == "UA" |
           carrier == "AA" |
           carrier == "DL")
```

```{r}
# d
flights |> 
  filter(month == 7 | month == 8 | month == 9)
```

```{r}
# e
flights |> 
  filter(arr_delay > 120 & dep_delay == 0)
```

```{r}
# f
flights |>
  filter(dep_delay >= 60 & arr_delay <= -30)
```

```{r}
# 2
# a
flights |>
  arrange(desc(dep_delay))
```

```{r}
# b
earliest <- flights |>
  arrange(time_hour)
```

```{r}
# 3
spediest <- flights |>
  arrange(distance / air_time * 60)
```

```{r}
# 4
flights |>
  filter(year == 2013) |>
  distinct(year, month, day) |>
  count()
```

```{r}
# 5
# a
farthest_distance <- flights |> 
  arrange(desc(distance))
```

```{r}
# b 
least_distance <- flights |> 
  arrange(distance)
```

```{r}
# 6
# It matters what order you used filter() and arrange() if they are being used both.
```

```{r}
flights |>
  filter(year == 2013) |>
  arrange(month, day)
```

As `filter()` was used first, the `arrange()` will only sort the filtered results.

```{r}
flights |>
  arrange(distance) |>
  filter(year == 2013)
```

### Columns

#### `mutate()`

```{r}
flights |>
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60
  )
```

```{r}
# add the variables to the left hand side
flights |>
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
    .before = 1
  )
```

```{r}
# add the new variables after specific columns
flights |>
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
    .after = day
  )
```

```{r}
# keep the columns that were involved or created in the mutate() step
flights |>
  mutate(
    gain = dep_delay - arr_delay,
    hours = air_time / 60,
    gain_per_hour = gain / hours,
    .keep = "used"
  )

```

#### `select()`

```{r}
# Select columns by name
flights |>
  select(year, month, day)
```

```{r}
# Select all columns between year and day (inclusive)
flights |>
  select(year:day)
```

```{r}
# Select all columns except those from year to day (inclusive)
flights |>
  select(!year:day)
```

```{r}
# or
flights |>
  select(-year:-day)
```

```{r}
# Select all columns that are characters
flights |>
  select(where(is.character))
```

```{r}
# starts_with("abc"): matches names that begin with “abc”.
flights |> 
  select(starts_with("c"))
```

```{r}
# ends_with("xyz"): matches names that end with “xyz”
flights |> 
  select(ends_with("lay"))
```

```{r}
# contains("ijk"): matches names that contain “ijk”
flights |>
  select(contains("time"))
```

```{r}
# num_range("x", 1:3): matches x1, x2 and x3

flights |>
  rename(x1 = year,
         x2 = month,
         x3 = day) |>
    select(num_range("x", 1:3))
```

```{r}
# rename variables as you select() them by using =
flights |>
  select(tail_num = tailnum)
```

#### `rename()`

```{r}
flights |>
  rename(tail_num = tailnum)
```

```{r}
flights |>
  janitor::clean_names()
```

#### `relocate()`

```{r}
# By default relocate() moves variables to the front
flights |>
  relocate(time_hour, air_time)
```

```{r}
# Specify where to put them using the .before and .after arguments
flights |>
  relocate(year:dep_time, .after = time_hour)
```

```{r}
flights |>
  relocate(starts_with("arr"), .before = dep_time)
```

#### Exercises

```{r}
# 1
flights |>
  select(dep_time, sched_dep_time, dep_delay)
```

`dep_time` is the actual time that the plane left the airport.`sched_dep_time` is the scheduled departure time for the flight. The difference between two is the `dep_delay` and if it is 0 that means the plane departed on time, if it is negative that means the plane departed earlier.

```{r}
# 2
# a
flights |> 
  select(dep_time, dep_delay, arr_time, arr_delay)
```

```{r}
# b
flights |>
  select(dep_time:arr_delay) |>
  select(-sched_arr_time, -sched_dep_time)
```

```{r}
# c
flights |>
  select(dep_time:arr_delay) |>
  select(!sched_dep_time) |>
  select(!sched_arr_time)
```

```{r}
# 3
flights |>
  select(carrier, carrier)
```

```{r}
# 4
variables <- c("year", "month", "day",
               "dep_delay", "arr_delay")
```

```{r}

```

```{r}
flights |>
  select(any_of(variables))
```

```{r}
# 5
flights |> 
  select(contains("TIME"))
```

If default to ignore.case argument is set to FALSE, then it will select exact matches:

```{r}
flights |> 
  select(contains("TIME", ignore.case = FALSE))
```

```{r}
# 6
flights |>
  rename(air_time_min = air_time) |>
  relocate(air_time_min)
```

```{r}
# 7

# flights |> 
#  select(tailnum) |> 
#  arrange(arr_delay)
#> Error in `arrange()`:
#> ℹ In argument: `..1 = arr_delay`.
#> Caused by error:
#> ! object 'arr_delay' not found
```

It means data frame can not be sorted by the column that is not selected to be printed. If it is selected the code prints the sorted result:

```{r}
flights |>
  select(tailnum, arr_delay) |>
  arrange(arr_delay)
```

### The pipe

```{r}
# the fast flights to Houston’s IAH airport
flights |>
  filter(dest == "IAH") |>
  mutate(speed = distance / air_time * 60) |>
  select(year:day, dep_time, 
         carrier, flight, speed) |>
  arrange(desc(speed))
```

```{r}
# without pipe: nested functions
arrange(
  select(
    mutate(
      filter(
        flights,
        dest == "IAH"
      ),
      speed = distance /air_time * 60
    ),
    year:day, dep_time, carrier, flight, speed
  ),
  desc(speed)
)
```

```{r}
# without pipe: use a bunch of intermediate objects
flights1 <- filter(flights, dest == "IAH")
flights2 <- mutate(flights1, speed = distance / air_time * 60)
flights3 <- select(flights2, year:day, dep_time, carrier, flight, speed)
arrange(flights3, desc(speed))

flights1 <- filter(flights, dest == "IAH")
flights2 <- mutate(flights1, speed = distance / air_time * 60)
flights3 <- select(flights2, year:day, dep_time, carrier, flight)
```

### The Groups

#### `group_by()`

```{r}
flights |> 
  group_by(month)
```

#### `summarize()`

```{r}
# Because of NA values, all average values are NAs
flights |> 
  group_by(month) |> 
  summarize(
    avg_delay = mean(dep_delay)
  )
```

```{r}
flights |> 
  group_by(month) |> 
  summarize(
    avg_delay = mean(dep_delay, na.rm = TRUE)
  )
```

```{r}
# Return the number of rows in each group
flights |> 
  group_by(month) |> 
  summarize(
    delay = mean(dep_delay, na.rm = TRUE),
    n = n()
  )
```

#### `The slice_ functions`

```{r}
# df |> slice_head(n = 1) takes the first row from each group
flights |> 
  group_by(dest) |> 
  slice_head(n = 5) |> 
  relocate(dest)
```

```{r}
# Select (e.g.) 10% of the rows in each group
flights |> 
  group_by(dest) |> 
  slice_head(prop = 0.1) |> 
  relocate(dest)
```

```{r}
# df |> slice_tail(n = 1) takes the last row in each group.
flights |> 
  group_by(dest) |> 
  slice_tail(n = 5) |> 
  relocate(dest)
```

```{r}
# df |> slice_min(x, n = 1) takes the row with the smallest value of column x
flights |> 
  group_by(dest) |> 
  slice_min(arr_delay, n = 5) |> 
  relocate(dest, arr_delay)
```

```{r}
# df |> slice_max(x, n = 1) takes the row with the largest value of column x
flights |> 
  group_by(dest) |> 
  slice_max(arr_delay, n = 5) |> 
  relocate(dest, arr_delay)
```

```{r}
# df |> slice_sample(n = 1) takes one random row
flights |> 
  group_by(dest) |> 
  slice_sample(n = 1) |> 
  relocate(dest)
```

```{r}
# slice_min() and slice_max() keep tied values so n = 1 means give us all rows with the highest value
# to get exactly one row per group
flights |> 
  group_by(dest) |> 
  slice_max(arr_delay, n = 1, with_ties = FALSE) |>
  relocate(dest)
```

#### Grouping by multiple variables

```{r}
daily <- flights |>
  group_by(year, month, day)

daily
```

```{r}
# When you summarize a tibble grouped by more than one variable
# each summary peels off the last group
daily_flights <- daily |> 
  summarize(n = n())
daily_flights
```

```{r}
# Suppress the message
daily_flights <- daily |> 
  summarize(
    n = n(),
    .groups = "drop_last"
  )

daily_flights
```

```{r}
# Drop all grouping
daily_flights <- daily |> 
  summarize(
    n = n(),
    .groups = "drop"
  )

daily_flights
```

```{r}
# Preserve the same groups
daily_flights <- daily |> 
  summarize(
    n = n(),
    .groups = "keep"
  )

daily_flights
```

#### Ungrouping

```{r}
# remove grouping from a data frame without using summarize()
daily |> 
  ungroup()
```

```{r}
# Summarize the ungrouped data frame
daily |> 
  ungroup() |> 
  summarize(
    avg_delay = mean(dep_delay, na.rm = TRUE),
    flights = n()
  )
```

#### `.by`

```{r}
#  use the .by argument to group within a single operation

flights |> 
  summarise(
    delay = mean(dep_delay, na.rm = TRUE),
    n = n(),
    .by = month
  )
```

```{r}
# group by multiple variables

flights |> 
  summarize(
    delay = mean(dep_delay, na.rm = TRUE),
    n = n(),
    .by = c(origin, dest)
  )
```

#### Exercises

```{r}
# 1

# a
flights |> 
  group_by(carrier) |> 
  summarize(delays = mean(dep_delay, 
                          na.rm = TRUE)) |> 
  arrange(desc(delays))
```

```{r}
# b
flights |> 
  group_by(origin) |> 
  summarize(delays = mean(dep_delay, na.rm = TRUE)) |> 
  arrange(desc(delays))
```

```{r}
flights |> 
  group_by(carrier, origin) |> 
  summarize(delays = mean(dep_delay,
                          na.rm = TRUE),
            n = n(),
            .groups = "keep") |> 
  arrange(desc(n))
```

```{r}
# 2
flights |> 
  group_by(flight, origin) |> 
  summarize(delays = mean(dep_delay, 
                          na.rm = TRUE,
                          ), 
            .groups = "keep") |> 
  arrange(desc(delays)) |> 
  ungroup()
```

```{r}
# 3
# Number of delays
flights |> 
  group_by(hour) |> 
  summarize(delays = mean(dep_delay, 
                          na.rm = TRUE,
                          ),
            n = n(),
            .groups = "keep") |> 
  arrange(desc(n)) |> 
  ggplot(aes(x = hour, y = n)) +
  geom_bar(stat = "identity", fill = "blue") +
   labs(title = "Variation of delays over the course of the day",
    x = "Hour of the day",
    y = "Number of delays")
```

```{r warning=FALSE}
# 
flights |> 
  group_by(hour, dep_delay) |> 
  summarize(delays = mean(dep_delay, 
                          na.rm = TRUE
                          ),  
            .groups = "keep") |> 
  arrange(desc(dep_delay)) |> 
   ggplot(aes(x = hour, y = delays)) +
  geom_bar(stat = "identity", fill = "blue") +
   labs(title = "Variation of delays over the course of the day",
    x = "Hour of the day",
    y = "Delay minutes")
```

```{r}
# 4
flights |> 
  group_by(dest) |> 
  slice_min(arr_delay, n = -5) |> 
  relocate(dest, arr_delay)
```

If you supply a negative n to slice_min() and friends it ungroups the data frame.

```{r}
# 5

flights |> select(year, month, 
                  day, flight, dest) |> 
  count(year, month, 
                  day, flight, dest, sort = TRUE)
```

```{r}
flights |> filter(carrier == "UA") |> 
  count(sort = TRUE)
```

```{r}
# 6
df <- tibble(
  x = 1:5,
  y = c("a", "b", "a", "a", "b"),
  z = c("K", "K", "L", "L", "K")
)
```

```{r}
# a
df |> 
  group_by(y)
```

```{r}
# b
df |> 
  arrange(y)
```

```{r}
# c
df |> group_by(y) |> 
  summarise(mean_x = mean(x))
```

```{r}
# d
df |> 
  group_by(y, z) |> 
  summarise(mean_x = mean(x), 
            .groups = "keep")
```

```{r}
# e
df |> 
  group_by(y, z) |> 
  summarise(mean_x = mean(x),
            .groups = "drop")
```

```{r}
# f
df |> 
  group_by(y, z) |> 
  summarise(mean_x = mean(x))
```

```{r}
df |> 
  group_by(y, z) |> 
  mutate(mean_x = mean(x))
```

## **Case study: aggregates and sample size**

```{r}
print(Batting)
```

```{r}
glimpse(Batting)
```

```{r}
batters <-
  Lahman::Batting |> 
  group_by(playerID) |> 
  summarize(
    performance = sum(H, na.rm = TRUE) / 
      sum(AB, na.rm = TRUE),
    n = sum(AB, na.rm = TRUE)
  )

batters
```

```{r}
batters |> 
  filter(n > 100) |> 
  ggplot(aes(x = n, y = performance)) +
  geom_point(alpha = 1 / 10) +
  geom_smooth(se = FALSE)
```

```{r}
batters |> 
  arrange(desc(performance))
```
