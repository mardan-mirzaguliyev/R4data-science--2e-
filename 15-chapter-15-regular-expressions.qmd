---
title: "Chapter 15 - Regular Expressions"
author: "Mardan Mirzaguliyev"
format: html
editor: visual
date: 11/19/2023
---

# Regular Expressions

```{r}
library(tidyverse)
library(babynames)
```

## Pattern basics

### **Literal characters**

Letters and numbers match exactly and are called **literal characters**.

```{r}
str_view(fruit, "berry")
```

### Metachracters

Most punctuation characters, like `.`, `+`, `*`, `[`, `]`, and `?`, have special meanings and are called **metacharacters**.

```{r}
str_view(c("a", "ab", "ae", 
           "bd", "ea", "eab"), "a.")
```

```{r}
str_view(fruit, "a...e")
```

### Quantifiers

**Quantifiers** control how many times a pattern can match:

-   `?` makes a pattern optional (i.e. it matches 0 or 1 times)

-   `+` lets a pattern repeat (i.e. it matches at least once)

-   `*` lets a pattern be optional or repeat (i.e. it matches any number of times, including 0).

```{r}
# ab? matches an "a", optionally followed by a "b".
str_view(c("a", "ab", "abb"), "ab?")
```

```{r}
# ab+ matches an "a", followed by at least one "b".
str_view(c("a", "ab", "abb"), "ab+")
```

```{r}
# ab* matches an "a", followed by any number of "b"s.
str_view(c("a", "ab", "abb"), "b*")
```

### Character classes

**Character classes** are defined by `[]` and let you match a set of characters, e.g., `[abcd]` matches "a", "b", "c", or "d". You can also invert the match by starting with `^`: `[^abcd]` matches anything **except** "a", "b", "c", or "d".

```{r}
str_view(words, "[aeiou]x[aeiou]")
```

```{r}
str_view(words, "[^aeiou]y[^aeiou]")
```

### Alternation

You can use **alternation**, `|`, to pick between one or more alternative patterns.

```{r}
str_view(fruit, "apple|melon|nut")
```

```{r}
str_view(fruit, "aa|ee|ii|oo|uu")
```

## Key functions

### Detect matches

```{r}
str_detect(c("a", "b", "c"), "[aeiou]")
```

```{r}
babynames |> 
  filter(str_detect(name, "x")) |> 
  count(name, wt = n, sort = TRUE)
```

```{r}
babynames |> 
  group_by(year) |> 
  summarize(
    prop_x = mean(str_detect(name, "x"))
    ) |> 
  ggplot(aes(x = year, y = prop_x)) +
  geom_line()
```

There are two functions that are closely related to `str_detect()`: `str_subset()` and `str_which()`. `str_subset()` returns a character vector containing only the strings that match. `str_which()` returns an integer vector giving the positions of the strings that match.

### Count matches

```{r}
x <- c("apple", "banana", "pear")
str_count(x, "p")
```

```{r}
str_count("abababa", "aba")
```

```{r}
str_view("abababa", "aba")
```

```{r}
babynames |> 
  count(name) |> 
  mutate(
    vowels = str_count(name, "[aeiou]"),
    consonants = str_count(name, "[^aeiou]")
  )
```

If you look closely, you'll notice that there's something off with our calculations: "Aaban" contains three "a"s, but our summary reports only two vowels. That's because regular expressions are case sensitive. There are three ways we could fix this:

```{r}
# Add the upper case vowels to the character class
babynames |> 
  count(name) |> 
  mutate(
    vowels = str_count(name, "[aeiouAEIOU]"),
    consonants = str_count(name, "[^aeiouAEIOU]")
  )
```

```{r}
# Tell the regular expression to ignore case
babynames |> 
  count(name) |> 
  mutate(
    vowels = str_count(
      name,
      regex("[aeiou]", ignore_case = TRUE)
      ),
    consonants = str_count(
      name, 
      regex("[^aeiou]", ignore_case = TRUE)
      )
  )
```

```{r}
# Use str_to_lower() to convert the names to lower case
babynames |> 
  count(name) |> 
  mutate(
    vowels = str_count(
      str_to_lower(name), 
      "[aeiou]"
      ),
    consonants = str_count(
      str_to_lower(name), 
      "[^aeiou]"
      )
  )
```

```{r}
babynames |> 
  count(name) |> 
  mutate(
    name = str_to_lower(name),
    vowels = str_count(name, "[aeiou]"),
    conconants = str_count(name, "[^aeiou]")
  )
```

### Replace values

```{r}
x <- c("apple", "pear", "banana")
str_replace(x, "[aeiou]", "-")
```

```{r}
str_replace_all(x, "[aeiou]", "-")
```

```{r}
str_remove(x, "[aeiou]")
```

```{r}
str_remove_all(x, "[aeiou]")
```

### Extract variables

```{r}
df <- tribble(
  ~str,
  "<Sheryl>-F_34",
  "<Kisha>-F_45", 
  "<Brandon>-N_33",
  "<Sharon>-F_38", 
  "<Penny>-F_58",
  "<Justin>-M_41", 
  "<Patricia>-F_84", 
)
df
```

```{r}
df |> 
  separate_wider_regex(
    str,
    patterns = c(
      "<",
      name = "[A-Za-z]+",
      ">-",
      gender = ".",
      "_",
      age = "[0-9]+"
    )
  )
```

### Exercises

```{r}
# 1
# a
babynames |> 
  count(name) |> 
  mutate(
    name = str_to_lower(name),
    vowels = str_count(name, "[aeiou]")
  ) |> 
  arrange(desc(vowels))
```

```{r}
# b
babynames |>
  mutate(
    name = str_to_lower(name),
    total_len = nchar(name),
    vowel_prop = str_count(
      name, "[aeiou]") / total_len,
    .keep = "used"
      ) |> 
  arrange(desc(vowel_prop))
```

In the provided code, the denominator is the total number of characters (including both vowels and consonants) in each baby name. The **`nchar(name)`** function is used to calculate the total number of characters in the name.

```{r}
# 2
forward_slash <- "a/b/c/d/e"
```

```{r}
# a
back_slash <- str_replace_all(
  forward_slash, "/", "\\\\"
  )
back_slash
```

```{r}
str_view(back_slash)
```

```{r}
# b
forward_slash <- str_replace_all(
  back_slash, "\\\\", "/"
  )
forward_slash
```

```{r}
str_view(forward_slash)
```

```{r}
# 3
# a
babynames |> 
  mutate(
    name_to_lower = str_to_lower(name)
    ) |> 
  select(name, name_to_lower)
```

```{r}
# b - 1
babynames |> 
  mutate(
    name_to_lower = chartr(
      "A-Z",
      "a-z",
      name
    )
    ) |> 
  select(name, name_to_lower)
```

```{r}
# b - 2
babynames |> 
  mutate(
    name_to_lower = str_replace_all(
      name,
      "[A-Z]",
      function(name) tolower(name)
    )
    ) |> 
  select(name, name_to_lower)
```

```{r}
# 4
# Regular expression pattern
pattern <- "^\\+\\d{3}\\s\\d{2}\\s\\d{2,3}\\s\\d{2}\\s\\d{2}$"
```

Explanation:

-   **`^`**: Asserts the start of the string.

-   **`\+`**: Matches the plus sign (+) for the country code.

-   **`\d{3}`**: Matches exactly three digits for the country code.

-   **`\s`**: Matches a space.

-   **`\d{2}`**: Matches exactly two digits for the area code.

-   **`\s`**: Matches a space.

-   **`\d{2,3}`**: Matches two or three digits for the local area code.

-   **`\s`**: Matches a space.

-   **`\d{2}`**: Matches exactly two digits for the first part of the local number.

-   **`\s`**: Matches a space.

-   **`\d{2}`**: Matches exactly two digits for the second part of the local number.

-   **`$`**: Asserts the end of the string.

This regular expression assumes a specific format, and you might need to adjust it based on the variations allowed in the actual telephone numbers used in Azerbaijan.

```{r}
phone_number1 <- "+994 12 345 67 89"
phone_number2 <- "+994 50 345 67 89"
```

```{r}
str_view(phone_number2, pattern)
```

## Pattern details

### Escaping

-   The complete set of metacharacters is `.^$\|*+?{}[]()`

```{r}
# To create the regular expression \., we need to use \\.
dot <- "\\."
```

```{r}
# But the expression itself only contains one \
str_view(dot)
```

```{r}
# And this tells R to look for an explicit.
str_view(c("abc", "a.c", "bef"), "a\\.c")
```

```{r}
x <- "a\\b"
x
```

```{r}
str_view(x)
```

```{r}
str_view(x, "\\\\")
```

```{r}
str_view(x, r"{\\}")
```

```{r}
str_view(
  c("abc", "a.c", "a*c", "a c"),
  "a[.]c"
  )
```

```{r}
str_view(
  c("abc", "a.c", "a*c", "a c"),
  ".[*]c"
  )
```

### Anchors

-   `^` to match the start

-   `$` to match the end

```{r}
str_view(fruit, "^a")
```

```{r}
str_view(fruit, "apple")
```

```{r}
str_view(fruit, "^apple$")
```

```{r}
x <- c(
  "summary(x)", 
  "summarize(df)", 
  "rowsum(x)",
  "sum(x)"
  )
```

```{r}
str_view(x, "sum")
```

```{r}
str_view(x, "\\bsum\\b")
```

```{r}
# When used alone, anchors will produce a zero-width match
str_view("abc", c("$", "^", "\\b"))
```

```{r}
# Replacing a standalone anchor
str_replace_all(
  "abc", 
  c("$", "^", "\\b"), 
  "--"
  )
```

### Character classes

A **character class**, or character **set**, allows you to match any character in a set.

-   `^` - `[abc]` matches "a", "b", or "c" and `[^abc]` matches any character except "a", "b", or "c".

-   `-` defines a range, e.g., `[a-z]` matches any lower case letter and `[0-9]` matches any number.

-   `\` escapes special characters, so `[\^\-\]]` matches `^`, `-`, or `]`.

```{r}
x <- "abcd ABCD 12345 -!@#%."
```

```{r}
str_view(x, "[abc]+")
```

```{r}
str_view(x, "[a-z]+")
```

```{r}
str_view(x, "[^a-z0-9]+")
```

```{r}
# # You need an escape to match characters that are otherwise
# special inside of []
str_view("a-b-c", "[a-c]")
```

```{r}
str_view("a-b-c", "[a\\-c]")
```

-   `.` matches any character apart from a newline.

-   `\d` matches any digit;\
    `\D` matches anything that isn't a digit.

-   `\s` matches any whitespace (e.g., space, tab, newline);\
    `\S` matches anything that isn't whitespace.

-   `\w` matches any "word" character, i.e. letters and numbers;\
    `\W` matches any "non-word" character.

```{r}
x <- "abcd ABCD 12345 -!@#%."
```

```{r}
str_view(x, "\\d+")
```

```{r}
str_view(x, "\\D+")
```

```{r}
str_view(x, "\\s+")
```

```{r}
str_view(x, "\\S+")
```

```{r}
str_view(x, "\\w+")
```

```{r}
str_view(x, "\\W+")
```

### Quantifiers

**Quantifiers** control how many times a pattern matches.

-   `?` (0 or 1 matches)

-   `+` (1 or more matches)

-   `*` (0 or more matches)

-   `{n}` matches exactly n times.

-   `{n,}` matches at least n times.

-   `{n,m}` matches between n and m times.

#### Operator precedence and parentheses

Regular expressions have their own precedence rules: quantifiers have high precedence and alternation has low precedence which means that `ab+` is equivalent to `a(b+)`, and `^a|b$` is equivalent to `(^a)|(b$)`.

#### Grouping and capturing

The first way to use a capturing group is to refer back to it within a match with **back reference**: `\1` refers to the match contained in the first parenthesis, `\2` in the second parenthesis, and so on.

```{r}
str_view(fruit, "(..)\\1")
```

```{r}
str_view(words, "^(..).*\\1$")
```

```{r}
sentences |> 
  head()
```

```{r}
sentences |> 
  str_replace(
    "(\\w+) (\\w+) (\\w+)", 
    "\\1 \\3 \\2"
    ) |> 
  str_view() |> 
  head()
```

```{r}
# str_match returns matrix
sentences |> 
  str_match("the (\\w+) (\\w+)") |> 
  head()
```

```{r}
# convert to a tibble and name the columns
sentences |> 
  str_match("the (\\w+) (\\w+)") |> 
  as_tibble(.name_repair = "minimal") |> 
  set_names("match", "word1", "word2")
```

```{r}
x <- c("a gray cat", "a grey dog")
```

```{r}
str_match(x, "gr(e|a)y")
```

```{r}
str_match(x, "gr(?:e|a)y")
```

#### Exercises

```{r}
# 1
# a
str1 <- "\"\'\\"
```

```{r}
str_view(str1, "\\D+")
```

```{r}
# b
str2 <- "$^$"
str2
```

```{r}
str_view(str2, "\\D+")
```

```{r}
# 2
str_backslash <- "\\"
str_backslash
```

```{r}
str_view(str_backslash)
```

-   "\\" - In a regular expression, a single backslash (**`\`**) is used as an escape character. When you use a single backslash in a regular expression pattern, it is interpreted as the beginning of an escape sequence. This means that if you use a pattern like **`"\""`** in R, the backslash is interpreted as the start of an escape sequence, and the subsequent double quote (**`"`**) is treated as a literal character rather than the closing quote for the string.

    To match a literal backslash in a regular expression, you need to escape it with another backslash. Therefore, the correct pattern to match a backslash in a regular expression is **`"\\\\"`**.

-   In a regular expression, a single backslash is used as an escape character, and it needs to be escaped itself to represent a literal backslash. The **`str_view`** function uses regular expressions, so to match a single backslash in your input string, you need to use a pattern with two backslashes.

```{r}
str_view(str_backslash, "\\\\")
```

```{r}
# 3
# a
str_view(words, "^y")
```

```{r}
# b
str_view(words, "[^y]+")
```

```{r}
# c
str_view(words, "x$")
```

```{r}
# d
str_view(words, "\\b[\\w]{3}\\b")
```

```{r}
# e
str_view(words, "\\b[\\w]{7,}\\b")
```

```{r}
# f
str_view(words, "[aeiou][^aeiou]{1}")
```

```{r}
# g
str_view(
  words, 
  "(?:(?:[aeiou][^aeiou]){2,})"
  )
```

```{r}
# h
str_view(
  words, 
  "^[aeiou][^aeiou](?:[aeiou][^aeiou])*$"
  )
```

```{r}
# 4
```

```{r}
airplane <- c("airplane", "aeroplane")
```

```{r}
str_view(airplane, "^[a-z]+o?[a-z]$")
```

```{r}
aluminum <- c("aluminum", "aluminium")
```

```{r}
str_view(aluminum, "[a-z]+i?um")
```

```{r}
analog <- c("analog", "analogue")
```

```{r}
str_view(analog, "[a-z]+u?e?" )
```

```{r}
ass <- c("ass", "arse")
```

```{r}
str_view(ass, "[a-z]+s?s?e?")
```

```{r}
center <- c("center", "centre")
```

```{r}
str_view(center, "[a-z]+r?r?e?")
```

```{r}
defence <- c("defense", "defence")
```

```{r}
str_view(defence, "\\w+c?e")
```

```{r}
donut <- c("donut", "doughnut")
```

```{r}
str_view(donut, "\\w+?u?g?h?\\w+")
```

```{r}
gray <- c("gray", "grey")
```

```{r}
str_view(gray, "[a-z]+a?e?y")
```

```{r}
modeling <- c("modeling", "modelling")
```

```{r}
str_view(modeling, "[a-z]+l?[a-z]")
```

```{r}
skeptic <- c("skeptic", "sceptic")
```

```{r}
str_view(skeptic, "^[\\w]+k?|c?[\\w]")
```

```{r}
summarize <- c("summarize", "summarise")
```

```{r}
str_view(summarize, "[a-z]+z?s?e")
```

```{r}
# 5
words |> 
  str_view()
```

```{r}
words |> 
  str_replace(
    "\\b(\\w)(\\w*?)(\\w)\\b", 
    "\\3 \\2 \\1"
    ) |> 
  str_view()
```

```{r}
# 6
# a
# ^.*$
```

-   Starts with any character, and has at least one more character

-   This regular expression matches any string, regardless of its content or length.

-   The regular expression **`^.*$`** matches any string, including an empty string. Let's break down the components:

    -   **`^`**: Asserts the beginning of the string.

    -   **`.*`**: Matches any character (except for a newline) zero or more times.

    -   **`$`**: Asserts the end of the string.

    So, **`^.*$`** effectively matches the entire string from the beginning to the end, regardless of its content. It's a very broad pattern that can be used to validate or capture an entire line or string.

```{r}
# b
# "\\{.+\\}"
```

-   This regular expression matches a string that starts with a "{" character, followed by one or more of any character (except a newline), and ends with a "}" character.

-   This is a string that defines a regular expression.

-   The regular expression **`\\{.+\\}`** is designed to match strings enclosed in curly braces. Let's break down the components:

    -   **`\\{`**: Matches the literal opening curly brace **`{`**. The backslashes (**`\\`**) are used to escape the curly brace because curly braces have special meaning in regular expressions, and the backslashes are needed to treat them as literal characters.

    -   **`.+`**: Matches one or more of any character (except for a newline).

    -   **`\\}`**: Matches the literal closing curly brace **`}`**. Similar to the opening brace, the backslashes (**`\\`**) are used to escape the closing curly brace.

    So, overall, **`\\{.+\\}`** matches a substring that starts with an opening curly brace, followed by one or more characters of any kind, and ends with a closing curly brace.

    For example, in the string "{example}", this regular expression would match the entire substring "{example}".

```{r}
# c
# \d{4}-\d{2}-\d{2}
```

The regular expression **`\d{4}-\d{2}-\d{2}`** is designed to match strings representing dates in the format "YYYY-MM-DD," where:

-   **`\d`**: Matches any digit (0-9).

-   **`{4}`**: Specifies that exactly four digits are expected.

-   **`-`**: Matches the hyphen character.

-   **`{2}`**: Specifies that exactly two digits are expected.

-   The pattern repeats for the month and day, separated by hyphens.

So, overall, **`\d{4}-\d{2}-\d{2}`** would match strings like "2023-11-18" representing a date in the "YYYY-MM-DD" format.

```{r}
# d
# "\\\\{4}"
```

The string **`"\\\\{4}"`** represents a regular expression. Let's break down what each part means:

-   **`\\`**: Represents a literal backslash character.

-   **`{4}`**: Specifies that the preceding element (in this case, a literal backslash) should appear exactly four times.

So, **`"\\\\{4}"`** is a regular expression that matches four consecutive backslashes. The first two backslashes are needed to represent a literal backslash in the regular expression, and the **`{4}`** indicates that these should appear four times consecutively.

```{r}
# e
# \..\..\..
```

-   The regular expression **`\..\..\..`** matches a literal period (.) followed by two literal dots (..), repeated three times. Therefore, it would match the string "......".

-   For example, if you're using a regular expression search in a text editor or programming language, and the input text contains "......", this regular expression would match that exact sequence of characters.

-   However, it's important to note that the interpretation of regular expressions can depend on the context and the specific implementation or tool you are using. In some scenarios, like in file path manipulation or security-related checks, the string "......" might be considered indicative of attempting to traverse up multiple levels in a directory structure, which could be a security concern in certain contexts. Always be cautious and context-aware when dealing with path manipulations in software development.

-   This regular expression matches a string that consists of three pairs of two characters each, where one of which is a literal dot character and the other can be any character except for a line break.

```{r}
# f
# (.)\1\1
```

The regular expression **`(.)\1\1`** is a capturing group that matches any character **`(.)`** followed by two occurrences of the same character **`\1\1`**.

Here's a breakdown:

-   **`(.)`**: Capturing group matching any single character and capturing it.

-   **`\1`**: Backreference to the first capturing group, meaning it should match the same character that was captured in the first group.

-   **`\1`**: Another backreference, ensuring it matches the same character as the first two.

So, this regex will match sequences of three consecutive identical characters.

-   This regular expression matches any character that occurs three times consecutively.

```{r}
str_view("aaabbbccc", "(.)\\1\\1")
```

```{r}
# g
# "(..)\\1"
```

-   This is a string that defines a regular expression.

-   This regular expression matches a string with any two characters followed by the exact same two characters.

## Pattern control

### Regex flags

#### `ignore_case = TRUE`

```{r}
bananas <- c("banana", "Banana", "BANANA")
str_view(bananas, "banana")
```

```{r}
str_view(
  bananas, 
  regex("banana", ignore_case = TRUE)
  )
```

```{r}
x <- "Line 1\nLine 2\nLine 3"
str_view(x, ".Line")
```

```{r}
str_view(x, regex(".Line", dotall = TRUE))
```

#### `multiline = TRUE`

```{r}
x <- "Line 1\nLine 2\nLine 3"
```

```{r}
str_view(x, "^Line")
```

```{r}
str_view(x, regex("^Line", multiline = TRUE))
```

#### `comments = TRUE`

```{r}
phone <- regex(
  r"(
  \(?        # optional opening parens
  (\d{3})    # area code
  [)\-]?     # optional closing parens or dash
  \ ?        # optional space
  (\d{3})    # another three numbers
  [\ -]?     # optional space or dash
  (\d{4})    # four more numbers
  )",
  comments = TRUE
)
```

```{r}
str_extract(
  c(
    "514-791-8141", 
    "(123) 456 7890",
    "1234565"
    ),
  phone
  )
```

### Fixed matches

```{r}
str_view(c("", "a", "."))
```

```{r}
str_view(c("", "a", "."), fixed("."))
```

```{r}
str_view("x X", "X")
```

```{r}
str_view("x X", fixed("X", ignore_case = TRUE))

```

```{r}
str_view(
  "i İ ı I",
  fixed("İ", ignore_case = TRUE)
  )
```

```{r}
str_view(
  "i İ ı I",
  coll("İ", ignore_case = TRUE, locale = "tr")
)
```

### Practice

To put these ideas into practice we'll solve a few semi-authentic problems next. We'll discuss three general techniques:

1.  checking your work by creating simple positive and negative controls

2.  combining regular expressions with Boolean algebra

3.  creating complex patterns using string manipulation

### Check your work

```{r}
# Using the ^ anchor alone is not enough
str_view(sentences, "^The")
```

```{r}
str_view(sentences, "^The\\b")
```

```{r}
print(
  str_view(sentences, "^She|He|It|They\\b"),
  n = Inf
  )
```

```{r}
print(
  str_view(
    sentences, 
    "^(She|He|It|They)\\b"
),
n = Inf
)
```

```{r}
pos <- c("He is a boy", "She had a good time")
neg <- c(
  "Shells come from the sea", 
  "Hadley said 'It's a great day'"
  )

pattern <- "^(She|He|It|They)\\b"
```

```{r}
str_detect(pos, pattern)
```

```{r}
str_detect(neg, pattern)
```

### Boolean operations

```{r}
str_view(words, "^[^aeiou]+$")
```

```{r}
str_view(words[!str_detect(words, "[aeiou]")])
```

```{r}
print(
  str_view(words, "a.*b|b.*a"),
  n = Inf
  )
```

```{r}
words[str_detect(words, "a") & 
        str_detect(words, "b")]
```

```{r}
words[
  str_detect(words, "a") &
  str_detect(words, "e") &
  str_detect(words, "i") &
  str_detect(words, "o") &
  str_detect(words, "u")
]
```

### Creating a pattern with code

```{r}
str_view(sentences, "\\b(red|green|blue)\\b")
```

```{r}
rgb <- c("red", "green", "blue")
```

```{r}
str_c(
  "\\b(",
  str_flatten(rgb, "|"), ")\\b"
)
```

```{r}
str_view(colors())
```

```{r}
cols <- colors()
cols <- cols[!str_detect(cols, "\\d")]
str_view(cols)
```

```{r}
pattern <- str_c(
  "\\b(", 
  str_flatten(cols, "|"), 
  ")\\b"
  )
```

```{r}
str_view(sentences, pattern)
```

### Exercises

```{r}
# 1
# a
str_view(words, "^(x)|(x)$")
```

```{r}
words[
  str_detect(words, "^x") |
  str_detect(words, "x$")
]
```

```{r}
# b
str_view(words, "^[aeiou].+[^aeiou]$")
```

```{r}
words[
  str_detect(words, "^[aeiou]") &
  str_detect(words, "[^aeiou]$")
]
```

```{r}
# c
str_view(words, "[aeiou]{1,}")
```

```{r}
words[
  str_detect(words, "^[aeiou]+") |
  str_detect(words, ".+[aeiou].+") |
  str_detect(words, ".+[aeiou]$")
]
```

```{r}
# 2
# i before e except after c
words_2 <- c("eize", "vein", 
"weird", "heist", 
"their", "feisty", 
"foreign", "protein", 
"species", "science", 
"sufficient", "conceive")
```

### **For the Rule ("i before e"):**

```{r}
str_view(words_2, "\\b\\w*ie\\w*\\b")
```

Explanation:

-   **`\b`**: Word boundary to ensure that "ie" is a whole word.

-   **`\w*`**: Zero or more word characters (letters).

-   **`ie`**: Literal "ie."

-   **`\w*`**: Zero or more word characters after "ie."

-   **`\b`**: Word boundary at the end of the word.

### **Against the Rule ("e" after "c"):**

```{r}
str_view(words_2, "\\b\\w*cei\\w*\\b")
```

Explanation:

-   **`\b`**: Word boundary to ensure that "cei" is a whole word.

-   **`\w*`**: Zero or more word characters (letters).

-   **`cei`**: Literal "cei."

-   **`\w*`**: Zero or more word characters after "cei."

-   **`\b`**: Word boundary at the end of the word.

```{r}
# 3
# a
col <- colors()
```

```{r}
str_detect(col, "dark")
```

```{r}
str_detect(col, "light")
```

```{r}
# b
cols <- colors()
```

```{r}
cols <- cols[
  !str_detect(cols, "\\d")                 &
  !str_detect(cols, "dark")                &
  !str_detect(cols, "light")               &
  !str_detect(cols, "medium")              &
  !str_detect(cols, "^yellow\\w{1,}")      &
  !str_detect(cols, "^[a-z]{1,}\\wblue$")  &
  !str_detect(cols, "^[a-z]{1,}\\wblue$")  &
  !str_detect(cols, "^[a-z]{1,}\\wwhite$")  &
  !str_detect(cols, "^[a-z]{1,}\\wgrey$")   &
  !str_detect(cols, "^[a-z]{1,}\\wgray$")   &
  !str_detect(cols, "^[a-z]{1,}\\wbrown$")  &
  !str_detect(cols, "^[a-z]{1,}\\wgreen$")  &
  !str_detect(cols, "^green[a-z]{1,}$")
  ]
cols
```

```{r}
# 4
datasets <- data(
  package = "datasets"
  )$results[, "Item"]
datasets
```

```{r}
# Data sets without the name of the grouping “data frame” in parentheses
pattern1 <- "data\\([A-Za-z.]+\\)" 

# Data sets with the name of the grouping “data frame” in parentheses
pattern2 <- "data\\([A-Za-z.]+(?:\\s*\\([^)]*\\))?\\)"
```

```{r}
# Sample R code
r_code = "
data(mtcars)
mydata <- data.frame(x = rnorm(100), y = rnorm(100))
data(iris)
data(state.region (state))
data(BJsales.lead (BJsales))
"
```

```{r}
str_view(r_code, pattern1)
```

```{r}
str_view(r_code, pattern2)
```

```{r}
data(BJsales)
```

## Regular expressions in other places

### `tidyverse`

-   `matches(pattern)` will select all variables whose name matches the supplied pattern. It's a "tidyselect" function that you can use anywhere in any tidyverse function that selects variables (e.g., [`select()`](https://dplyr.tidyverse.org/reference/select.html), [`rename_with()`](https://dplyr.tidyverse.org/reference/rename.html) and [`across()`](https://dplyr.tidyverse.org/reference/across.html)).

-   `pivot_longer()'s` `names_pattern` argument takes a vector of regular expressions, just like [`separate_wider_regex()`](https://tidyr.tidyverse.org/reference/separate_wider_delim.html). It's useful when extracting data out of variable names with a complex structure

-   The `delim` argument in [`separate_longer_delim()`](https://tidyr.tidyverse.org/reference/separate_longer_delim.html) and [`separate_wider_delim()`](https://tidyr.tidyverse.org/reference/separate_wider_delim.html) usually matches a fixed string, but you can use [`regex()`](https://stringr.tidyverse.org/reference/modifiers.html) to make it match a pattern. This is useful, for example, if you want to match a comma that is optionally followed by a space, i.e. `regex(", ?")`.

### Base R

-   `apropos(pattern)`

```{r}
apropos("replace")
```

-   `list.files(path, pattern)`

```{r}
head(
  list.files(
  path = "/Users/mardan.mirzaguliyev/Desktop/R-for-data-science-(2e)",
  pattern = "\\.Rmd$")
)
```
