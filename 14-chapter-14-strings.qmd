---
title: "Chapter 14 - Strings"
author: "Mardan Mirzaguliyev"
format: html
editor: visual
date: 2023/11/16
---

# Strings

```{r}
library(tidyverse)
library(babynames)
```

## Creating a string

```{r}
string1 <- "This is a string"
string2 <- 'If I want to include a "quote" inside a string, I use single quoter'
```

```{r}
string1
```

```{r}
string2
```

### Escapes

```{r}
double_quote1 <- "\""
double_quote2 <- '"'
double_quote1
double_quote2
```

```{r}
single_quote1 <- '\''
single_quote2 <- "'"
single_quote1
single_quote2
```

```{r}
backslash <- "\\"
backslash
```

```{r}
x <- c(single_quote1, double_quote1, backslash)
x
```

```{r}
# Raw contents
str_view(x)
```

```{r}
# Base R equivalent
writeLines(x)
```

### Raw string

```{r}
tricky <- "double_quote <- \"\\\"\" # or '\"'
single_quote <- '\\'' # or \"'\""
str_view(tricky)
```

```{r}
tricky <- r"(double_quote <- "\"" # or '\"'
single_quote <- '\'' # or "'")"
str_view(tricky)
```

A raw string usually starts with `r"(`and finishes with`)"`. But if your string contains `)"` you can instead use `r"[]"` or `r"{}"`, and if that's still not enough, you can insert any number of dashes to make the opening and closing pairs unique, e.g., `r"--()--"`, `r"---()---"`, etc. Raw strings are flexible enough to handle any text.

### Other special characters

```{r}
x <- c("one\ntwo", "one\ttwo", 
       "\u00b5", "\U0001f604")
x
```

```{r}
str_view(x)
```

### Exercises

```{r}
# 1
value1 <- "He said \"That's amazing!\""
value1
```

```{r}
str_view(value1)
```

```{r}
value2 <- "\\a\\b\\c\\d"
value2
```

```{r}
str_view(value2)
```

```{r}
value3 <- "\\\\\\\\\\\\"
value3
```

```{r}
str_view(value3)
```

```{r}
# 2
x <- "This\u00a0is\u00a0tricky"
x
```

```{r}
str_view(x)
```

In R, **`\u`** is an escape sequence that represents a Unicode character. The sequence **`\u`** is followed by four hexadecimal digits, and it specifies a Unicode code point.

In this specific case:

-   **`\u00a0`** represents the Unicode character with code point 00A0, which is the non-breaking space character.

In Unicode, the non-breaking space (NBSP) is a type of space character that prevents line breaks or word wraps at that position. It is often used in situations where a regular space may create ambiguity or undesired line breaks, such as in some typesetting and formatting scenarios.

So, when you encounter **`\u00a0`** in a string in R, it represents a non-breaking space.

## Creating many strings from data

### `str_c()`

```{r}
str_c("x", "y")
```

```{r}
str_c("x", "y", "z")
```

```{r}
str_c("Hello ", c("John", "Susan"))
```

```{r}
# Base R equivalent
paste0("Hello ", c("John", "Susan"))
```

```{r}
df <- tibble(name = c("Flora", "David", 
                      "Terra", NA))
```

```{r}
df |> 
  mutate(greeting = str_c("Hi ", name, "!"))
```

```{r}
df |> 
  mutate(
    greeting1 = str_c(
      "Hi ", 
      coalesce(name, "you"),
      "!"
      ),
    greetin2 = str_c(
      "Hi ", 
      coalesce(name, "you"),
      "!"
    )
  )
```

### `str_glue()`

```{r}
df |> mutate(
  greeting = str_glue("Hi {name}!")
  )
```

```{r}
# Escaping
df |> 
  mutate(
    greeting = str_glue(
    "{{Hi {name}!}}"
    )
    )
```

```{r}
df |> 
  mutate(
    greeting = str_glue("{{Hi {name}!")
    )
```

### `str_flatten()`

```{r}
str_flatten(c("x", "y", "z"))
```

```{r}
str_flatten(c("x", "y", "z"), ", ")
```

```{r}
str_flatten(
  c("x",  "y", "z"),
  ", ", 
  last = ", and "
  )
```

```{r}
df <- tribble(
  ~ name, ~ fruit,
  "Carmen", "banana",
  "Carmen", "apple",
  "Marvin", "nectarine",
  "Terence", "cantaloupe",
  "Terence", "papaya",
  "Terence", "mandarin"
)
```

```{r}
df |> 
  group_by(name) |> 
  summarize(fruits = str_flatten(fruit, ", "))
```

```{r}
# Base R equivalent
paste(c("x", "y", "z"))
```

```{r}
paste(c("x", "y", "z"), collapse = ", ")
```

### Exercises

```{r}
# 1
str_c("hi", NA)
```

```{r}
# Error
# str_c(letters[1:2], letters[1:3])
# Error in `str_c()`:
# ! Can't recycle `..1` (size 2) to match `..2` (size 3).
```

```{r}
paste0("hi", NA)
```

```{r}
paste0(letters[1:2], letters[1:3])
```

-   `str_c()` returns error if there is any NA, but `paste0()` converts NA to string

-   If the lengths of the strings are not equal, `str_c()` raises an error without recycling, but `paste0()` recycles the strings

```{r}
# 2
# a
## When passing a single vector, paste0 and paste work like as.character.
paste(1:12)
```

```{r}
paste0(1:12)
```

```{r}
as.character(1:12)
```

```{r}
## If you pass several vectors to paste0, they are concatenated in a
## vectorized way
nth <- paste0(
  1:12, 
  c("st", "nd", "rd", rep("th", 9))
  )
nth
```

```{r}
## paste works the same, but separates each input with a space
## Notice that the recycling rules make every input as long as the longest input
paste(
  month.abb, 
  "is the",
  nth, 
  "month of the year."
  )
```

```{r}
## You can change the separator by passing a sep argument
## which can be multiple characters.
paste(
  month.abb,
  "is the", 
  nth,
  "month of the year",
  sep = "_*_"
)
```

In R, both **`paste()`** and **`paste0()`** functions are used for concatenating strings, but there is a key difference in the way they handle separators.

-   **`paste()` function:**

    -   The **`paste()`** function is more flexible and allows you to specify a separator between the concatenated strings using the **`sep`** parameter.

    -   If you don't specify a separator, **`paste()`** uses a space (" ") as the default separator.

```{r}
# Using paste() with a specified separator
paste("a", "b", "c", sep = "-")
```

```{r}
# Using paste() without a specified separator
paste("a", "b", "c")
```

**`paste0()` function:**

-   The **`paste0()`** function is a shorthand for **`paste(..., sep = "")`**, meaning it concatenates the strings without any separator.

-   It is useful when you want to concatenate strings without spaces or any other separators.

```{r}
# Using paste0() - concatenation without a separator
paste0("a", "b", "c")
```

In summary, the primary difference lies in the default behavior and the ability to specify a separator. **`paste()`** is more versatile, allowing you to customize the separator, while **`paste0()`** is a quick way to concatenate strings without any separator. Choose the function that best fits your specific concatenation needs.

```{r}
# b
# default separator is space
paste("a", "b", "c")
```

```{r}
# define separotor
str_c("a", "b", "c", sep = " ")
```

```{r}
paste("a", "b", "c", sep = ", ")
```

```{r}
str_c("a", "b", "c", sep = ", ")
```

If you want to concatenate without a separator (equivalent to **`paste0()`**), you can omit the **`sep`** parameter:

```{r}
# Default for paste0() function
paste0("a", "b", "c")
```

```{r}
# Default for str_c() function
str_c("a", "b", "c")
```

Both examples demonstrate how to use **`str_c()`** to concatenate strings in a manner similar to the **`paste()`** function.

```{r}
# 3
# str_c() -> str_glue
food <- "sugar"
price <- "$ 2.99"
str_c("The price of ", food, " is ", price)
```

```{r}
str_glue(
  "The price of ", 
  {food}, 
  " is ",
  price
  )
```

```{r}
# b
# str_glue() -> str_c()
age <- 31
country <- "Azerbaijan"
str_glue(
  "I'm {age} years old and live in {country}"
  )
```

```{r}
str_c(
  "I'm ",
  age,
  " years old and live in ",
  country
)
```

```{r}
# c
# str_c() -> str_glue
title <- "R for Data Science"
str_c(
  "\\section{", 
  title, 
  "}")
```

```{r}
str_glue("\\\\section{{{title}}}")
```

## Extracting data from strings

### Separating into rows

```{r}
df1 <- tibble(
  x = c("a,b,c", "d,e", "f")
  )
```

```{r}
df1 |> 
  separate_longer_delim(
    x, delim = ","
      )
```

```{r}
df2 <- tibble(
  x = c("1211", "131", "21")
)
```

```{r}
df2 |> 
  separate_longer_position(x, width = 1)
```

### Separating into columns

```{r}
df3 <- tibble(
  x = c(
    "a10.1.2022", 
    "b10.2.2021",
    "e15.1.2015"
    )
)
```

```{r}
df3 |> 
  separate_wider_delim(
    x,
    delim = ".",
    names = c("code", "edition", "year")
  )
```

```{r}
df3 |> 
  separate_wider_delim(
    x,
    delim = ".",
    names = c("code", NA, "year")
  )
```

```{r}
df4 <- tibble(
  x = c(
    "202215TX", 
    "202122LA", 
    "202325CA"
    )
)
```

```{r}
df4 |> 
  separate_wider_position(
    x,
    widths = c(
      year = 4, 
      age = 2, 
      state = 2
        )
  )
```

```{r}
# omit values from the output by not naming them
df4 |> 
  separate_wider_position(
    x,
    widths = c(
      year = 4,
      2,
      state = 2
        )
  )
```

### Diagnosing widening problems

```{r}
df <- tibble(
  x = c(
    "1-1-1",
    "1-1-2",
    "1-3",
    "1-3-2",
    "1"
  )
)
```

```{r}
# df |> 
#  separate_wider_delim(
#     x,
#    delim = "-",
#    names = c("x", "y", "z")
#  )

# Error in `separate_wider_delim()`:
# ! Expected 3 pieces in each element of `x`.
```

```{r}
debug <- df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_few = "debug"
    )
```

```{r}
debug
```

```{r}
debug |> filter(!x_ok)
```

```{r}
df <- tibble(
  x = c(
    "1-1-1",
    "1-1-2",
    "1-3",
    "1-3-2",
    "1"
  )
)
df
```

```{r}
# fill in the missing pieces with NAs
df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_few = "align_start"
    )
```

```{r}
# too many pieces
df <- tibble(
  x = c(
    "1-1-1",
    "1-1-2",
    "1-3-5-6",
    "1-3-2",
    "1-3-5-7-9"
  )
)
```

```{r}
# df |> 
#  separate_wider_delim(
#    x,
#    delim = "-",
#    names = c("x", "y", "z")
#  )
# Error in `separate_wider_delim()`:
 #! Expected 3 pieces in each element of `x`.
```

```{r}
debug <- df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_many = "debug"
  )
```

```{r}
debug
```

```{r}
df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_many = "drop"
  )
```

```{r}
df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_many = "merge"
  )
```

## Letters

### Length

```{r}
str_length(
  c("a", "R for data science", NA)
  )
```

```{r}
babynames |> 
  count(
    length = str_length(name),
    wt = n
    )
```

```{r}
babynames |> 
  filter(str_length(name) == 15) |> 
  count(name, wt = n, sort = TRUE)
```

### Subsetting

```{r}
x <- c("Apple", "Banana", "Pear")
```

```{r}
str_sub(x, 1, 3)
```

```{r}
str_sub(x, -3, -1)
```

```{r}
# Note that str_sub() won’t fail if the string is too short
# it will just return as much as possible
str_sub("a", 1, 5)
```

```{r}
babynames |> 
  mutate(
    first = str_sub(name, 1, 1),
    last = str_sub(name, -1, -1)
  )
```

### Exercises

```{r}
# 1
```

-   `wt` argument is Frequency weights. Can be NULL or a variable:

    -   If `NULL` (the default), counts the number of rows in each group.

    -   If a variable, computes `sum(wt)` for each group.

-   In this case if `wt` argument is removed, the code just counts how many letters each unique name has:

```{r}
babynames |> 
  count(
    length = str_length(name)
    )
```

-   So, 4660 unique names have 2 letters, 41274 names have 3 and so on.

-   But if `wt` argument is added, the code calculates the sum of the counts of all the names that have 2 letters, 3 letters and so on.

```{r}
babynames |> 
  count(
    length = str_length(name),
    wt = n
    )
```

```{r}
# 2
babynames |> 
  mutate(
    len = str_length(name),
    mid_index = len %/% 2,
    mid = if_else(
      len %% 2 > 0,
      str_sub(
        name,
        mid_index + 1,
        mid_index + 1
        ), 
      str_sub(
        name,
        mid_index,
        mid_index + 1
        ),
      ),
    .keep = "used"
  )
```

```{r}
# 3
# a
# Calculate the length of each name and include the year
babynames <- 
  babynames |> 
  mutate(length = str_length(name))
```

```{r}
# Group by year and calculate the average name length
babynames |> 
  group_by(year) |> 
  summarize(
    average_length = mean(
      length,
      na.rm = TRUE
      ),
    n = n()
    ) |> 
# Plotting the trend
  ggplot(
    aes(x = year, y = average_length)
         ) +
  geom_line() +
  labs(
    title = "Average Length of Baby Names Over Time", 
    x = "Year",
    y = "Average Name Length"
    )
```

```{r}
# b
# Extract first and last letters using the pipe operator
babynames <- babynames |> 
  mutate(
    first = str_sub(name, 1, 1),
    last = str_sub(name, -1, -1)
    )
```

```{r}
# Create a table for the popularity of first letters over time
# Plotting the trends for first letters
babynames |> 
  group_by(year, first) |> 
  summarize(
    count = n(),
    .groups = "drop"
            ) |> 
  ggplot(
    aes(
      year,
      y = count, 
      color = first
        )
    ) +
  geom_line() +
  labs(
    title = "Popularity of First Letters in Baby Names Over Time",
    x = "Year",
    y = "Count",
    color = "First Letter"
  )
```

```{r}
babynames |> 
  group_by(year, last) |> 
  summarize(
    count = n(),
    .groups = "drop"
            ) |> 
  ggplot(
    aes(
      year,
      y = count, 
      color = last
        )
    ) +
  geom_line() +
  labs(
    title = "Popularity of Last Letters in Baby Names Over Time",
    x = "Year",
    y = "Count",
    color = "Last Letter"
  )
```

## Non-English text

### Encoding

```{r}
charToRaw("Hadley")
```

-   ASCII - **American** Standard Code for Information Interchange.

```{r}
x1 <- "text\nEl Ni\xf1o was particularly bad this year"
# read_csv(x1)$text - FATAL ERROR
```

```{r}
x2 <- "text\n\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd"
# read_csv(x2)$text - FATAL ERROR
```

```{r}
# read.csv(
#   x1, 
#  locale = locale(encoding = "Latin1")
#  )$text
```

```{r}
# read_csv(
#   x2, 
#   locale = locale(encoding = "Shift-JIS")
#   )
```

### Letter variations

```{r}
u <- c("\u00fc", "u\u0308")
str_view(u)
```

```{r}
str_length(u)
```

```{r}
str_sub(u, 1, 1)
```

```{r}
u[[1]] == u[[2]]
```

```{r}
str_equal(u[[1]], u[[2]])
```

### Locale-dependent functions

```{r}
str_to_upper(c("i", "ı"))
```

```{r}
str_to_upper(c("i", "ı"), locale = "tr")
```

```{r}
str_sort(c("a", "c", "ch", "h", "z"))
```

```{r}
str_sort(
  c("a", "c", "ch", "h", "z"), 
  locale = "cs"
  )
```
