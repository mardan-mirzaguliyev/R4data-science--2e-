---
title: "Chapter 28 - Quarto"
author: "Mardan Mirzaguliyev"
format: html
editor: visual
date: 2024/01/21
editor_options: 
  chunk_output_type: inline
---

# Quarto

```{r}
# install.packages("quarto")
library(quarto)
```

Quarto files are designed to be used in three ways:

1.  For communicating to decision-makers, who want to focus on the conclusions, not the code behind the analysis.

2.  For collaborating with other data scientists (including future you!), who are interested in both your conclusions, and how you reached them (i.e.the code).

3.  As an environment in which to do data science, as a modern-day lab notebook where you can capture not only what you did, but also what you were thinking.

Quarto is a command line interface tool, not an R package. This means that help is, by-and-large, not available through `?`. Instead, as you work through this chapter, and use Quarto in the future, you should refer to the [Quarto documentation](https://quarto.org).

## 1 Quarto basics

\|--- \|title: "Diamond sizes"

\|date: 2022-09-12

\|format: html

\|---

```{r}
#| label: setup
#| include: false

library(tidyverse)
```

```{r}
smaller <- diamonds |> 
  filter(carat <= 2.5)
```

We have data about `r nrow(diamonds)` diamonds. Only `r nrow(diamonds) - nrow(smaller)` are larger than 2.5 carats. The distribution of the remainder is shown below:

```{r}
#| label: plot-smaller-diamonds
#| echo: false

smaller |> 
  ggplot(aes(x = carat)) + 
  geom_freqpoly(binwidth = 0.01) +
  labs(x = "Carat", y = "Number of diamonds")
```

### Render programmatically

```{r}
# quarto::quarto_render("28-chapter-28-quarto.qmd")
```

### Exercises

```{r}
# 1
"Done"
```

```{r}
# 2
"Done"
```

## 2 Visual editor

The Visual editor in RStudio provides a [WYSIWYM](https://en.wikipedia.org/wiki/WYSIWYM) interface for authoring Quarto documents. Under the hood, prose in Quarto documents (`.qmd` files) is written in Markdown, a lightweight set of conventions for formatting plain text files.

## Source editor

\## Text formatting

\*italic\* \*\*bold\*\* \~\~strikeout\~\~ \`code\`

superscript\^2\^ subscript\~2\~

\[underline\]{.underline} \[small caps\]{.smallcaps}

## Headings

# 1st Level Header

## 2nd Level Header

### 3rd Level Header

## Lists

-   Bulleted list item 1

-   Item 2

-   Item 2a

-   Item 2b

1.  Numbered list item 1

2.  Item 2. The numbers are incremented automatically in the output.

## Links and images

\<http://example.com\>

\[linked phrase\](http://example.com)

\![optional caption text\](quarto.png){fig-alt="Quarto logo and the word quarto spelled in small case letters"}

## Tables

| Col1 | Col2 |
|------|------|
|      |      |
|      |      |
|      |      |

## 3 Code chunks

To run code inside a Quarto document, you need to insert a chunk. There are three ways to do so:

1.  The keyboard shortcut Cmd + Option + I / Ctrl + Alt + I.

2.  The “Insert” button icon in the editor toolbar.

3.  By manually typing the chunk delimiters ```` ```{r} ```` and ```` ``` ````.

### Chunk label

```{r}
#| label: simple-addition
1 + 1
```

This has three advantages:

1.  You can more easily navigate to specific chunks using the drop-down code navigator in the bottom-left of the script editor:

    ![Snippet of RStudio IDE showing only the drop-down code navigator which shows three chunks. Chunk 1 is setup. Chunk 2 is cars and it is in a section called Quarto. Chunk 3 is pressure and it is in a section called Including plots.](https://r4ds.hadley.nz/screenshots/quarto-chunk-nav.png)

2.  Graphics produced by the chunks will have useful names that make them easier to use elsewhere. More on that in [Section 28.6](https://r4ds.hadley.nz/quarto#sec-figures).

3.  You can set up networks of cached chunks to avoid re-performing expensive computations on every run. More on that in [Section 28.8](https://r4ds.hadley.nz/quarto#sec-caching).

### Chunk options

Chunk output can be customized with **options**, fields supplied to chunk header. Knitr provides almost 60 options that you can use to customize your code chunks.

The most important set of options controls if your code block is executed and what results are inserted in the finished report:

-   `eval: false` prevents code from being evaluated. (And obviously if the code is not run, no results will be generated). This is useful for displaying example code, or for disabling a large block of code without commenting each line.

-   `include: false` runs the code, but doesn’t show the code or results in the final document. Use this for setup code that you don’t want cluttering your report.

-   `echo: false` prevents code, but not the results from appearing in the finished file. Use this when writing reports aimed at people who don’t want to see the underlying R code.

-   `message: false` or `warning: false` prevents messages or warnings from appearing in the finished file.

-   `results: hide` hides printed output; `fig-show: hide` hides plots.

-   `error: true` causes the render to continue even if code returns an error. This is rarely something you’ll want to include in the final version of your report, but can be very useful if you need to debug exactly what is going on inside your `.qmd`. It’s also useful if you’re teaching R and want to deliberately include an error. The default, `error: false` causes rendering to fail if there is a single error in the document.

```{r}
#| label: simple-multiplication
#| eval: false

2 * 2
```

The following table summarizes which types of output each option suppresses:

![](images/chunk-options.png)

### Global options

As you work more with knitr, you will discover that some of the default chunk options don’t fit your needs and you want to change them.

You can do this by adding the preferred options in the document YAML, under `execute`. For example, if you are preparing a report for an audience who does not need to see your code but only your results and narrative, you might set `echo: false` at the document level. That will hide the code by default, so only showing the chunks you deliberately choose to show (with `echo: true`). You might consider setting `message: false`and `warning: false`, but that would make it harder to debug problems because you wouldn’t see any messages in the final document.

`title: "My report"`

`execute: echo: false`

`echo: false`

### Inline code

There is one other way to embed R code into a Quarto document: directly into the text, with: `` `r ` ``. This can be very useful if you mention properties of your data in the text. For example, the example document used at the start of the chapter had:

> We have data about `` `r nrow(diamonds)` `` diamonds. Only `` `r nrow(diamonds) - nrow(smaller)` `` are larger than 2.5 carats. The distribution of the remainder is shown below:

```{r}
comma <- function(x) format(
  x, 
  digits = 2,
  big.mark = ","
  )
```

```{r}
comma(3452345)
```

```{r}
comma(.12358124331)
```

### Exercises

```{r}
"Done"
```

## 4 Figures

The figures in a Quarto document can be embedded (e.g., a PNG or JPEG file) or generated as a result of a code chunk.

### Figure sizing

The biggest challenge of graphics in Quarto is getting your figures the right size and shape. There are five main options that control figure sizing: `fig-width`, `fig-height`, `fig-asp`, `out-width` and `out-height`. Image sizing is challenging because there are two sizes (the size of the figure created by R and the size at which it is inserted in the output document), and multiple ways of specifying the size (i.e. height, width, and aspect ratio: pick two of three).

We recommend three of the five options:

-   Plots tend to be more aesthetically pleasing if they have consistent width. To enforce this, set `fig-width: 6` (6”) and `fig-asp: 0.618`(the golden ratio) in the defaults. Then in individual chunks, only adjust `fig-asp`.

-   Control the output size with `out-width` and set it to a percentage of the body width of the output document. We suggest to `out-width: "70%"` and `fig-align: center`.

    That gives plots room to breathe, without taking up too much space.

-   To put multiple plots in a single row, set the `layout-ncol` to 2 for two plots, 3 for three plots, etc. This effectively sets `out-width` to “50%” for each of your plots if `layout-ncol` is 2, “33%” if `layout-ncol` is 3, etc. Depending on what you’re trying to illustrate (e.g., show data or show plot variations), you might also tweak `fig-width`, as discussed below.

### **Other important options**

When mingling code and text, like in this book, you can set `fig-show: hold` so that plots are shown after the code. This has the pleasant side effect of forcing you to break up large blocks of code with their explanations.

To add a caption to the plot, use `fig-cap`. In Quarto this will change the figure from inline to “floating”.

If you’re producing PDF output, the default graphics type is PDF. This is a good default because PDFs are high quality vector graphics. However, they can produce very large and slow plots if you are displaying thousands of points. In that case, set `fig-format: "png"` to force the use of PNGs. They are slightly lower quality, but will be much more compact.

## 4 Tables

Similar to figures, you can include two types of tables in a Quarto document. They can be markdown tables that you create directly in your Quarto document (using the Insert Table menu) or they can be tables generated as a result of a code chunk.

```{r}
mtcars[1:5, ]
```

```{r}
knitr::kable(mtcars[1:5, ])
```

# 5 Caching

Normally, each render of a document starts from a completely clean slate. This is great for reproducibility, because it ensures that you’ve captured every important computation in code. However, it can be painful if you have some computations that take a long time. The solution is `cache: true`.

## Exercises

```{r}
# 1
#> label: chunk-a
#> cache: true

data <- mpg |> 
  filter(class == "suv")

data
lubridate::now()
```

```{r}
#> label: chunk-b
#> cache: true
#> dependson: "chunk-a"
data |> 
  ggplot(aes(x = cty, y = hwy)) +
  geom_point()

lubridate::now()
```

```{r}
#> label: chunk-c
#> cache: true
#> dependson: "chunk-a"
plot <- data |> 
  ggplot(aes(x = cty, y = hwy)) +
  geom_point()

plot

lubridate::now()
```

```{r}
#> label: chunk-d
#> cache: true
#> dependson: c("chunk-b", "chunk-c")
plot + 
  labs(
    x = "City miles per gallon",
    y = "Highway miles per gallon"
    )
```

# 6 Troubleshooting

Troubleshooting Quarto documents can be challenging because you are no longer in an interactive R environment, and you will need to learn some new tricks. Additionally, the error could be due to issues with the Quarto document itself or due to the R code in the Quarto document.

One common error in documents with code chunks is duplicated chunk labels, which are especially pervasive if your workflow involves copying and pasting code chunks. To address this issue, all you need to do is to change one of your duplicated labels.

# 7 YAML header

HTML documents typically have a number of external dependencies (e.g., images, CSS style sheets, JavaScript, etc.) and, by default, Quarto places these dependencies in a `_files`f older in the same directory as your `.qmd` file. If you publish the HTML file on a hosting platform (e.g., QuartoPub, <https://quartopub.com>), the dependencies in this directory are published with your document and hence are available in the published report. However, if you want to email the report to a colleague, you might prefer to have a single, self-contained, HTML document that embeds all of its dependencies. You can do this by specifying the `embed-resources` option:

### Self-contained

`format:`

`html:`

`embed-resources: true`

### Parameters

Quarto documents can include one or more parameters whose values can be set when you render the report. Parameters are useful when you want to re-render the same report with distinct values for various key inputs. For example, you might be producing sales reports per branch, exam results by student, or demographic summaries by country. To declare one or more parameters, use the `params` field.

\`\`\`\` --- format: html params: my_class: "suv" ---

```{r}
#| label: setup
#| include: false

library(tidyverse)

class <- mpg |> filter(class == params$my_class)
```

# Fuel economy for `r params$my_class`s

\`\`\`{r} #\| message: false

ggplot(class, aes(x = displ, y = hwy)) + geom_point() + geom_smooth(se = FALSE) \`\`\` \`\`\`\`

You can write atomic vectors directly into the YAML header. You can also run arbitrary R expressions by prefacing the parameter value with `!expr`. This is a good way to specify date/time parameters.

`params:`

`start: !expr lubridate::ymd("2015-01-01")`

`snapshot: !expr lubridate::ymd_hms("2015-01-01 12:30:00")`

### **Bibliographies and Citations**

Quarto can automatically generate citations and a bibliography in a number of styles. The most straightforward way of adding citations and bibliographies to a Quarto document is using the visual editor in RStudio.

To add a citation using the visual editor, go to Insert \> Citation. Citations can be inserted from a variety of sources:

1.  [DOI](https://quarto.org/docs/visual-editor/technical.html#citations-from-dois) (Document Object Identifier) references.

2.  [Zotero](https://quarto.org/docs/visual-editor/technical.html#citations-from-zotero) personal or group libraries.

3.  Searches of [Crossref](https://www.crossref.org), [DataCite](https://datacite.org/), or [PubMed](https://pubmed.ncbi.nlm.nih.gov/).

4.  Your document bibliography (a `.bib` file in the directory of your document)

To create a citation within your .qmd file in the source editor, use a key composed of ‘\@’ + the citation identifier from the bibliography file. Then place the citation in square brackets. Here are some examples:

Separate multiple citations with a ;: Blah blah [@smith04; @doe99].

You can add arbitrary comments inside the square brackets: Blah blah [see @doe99, pp. 33-35; also @smith04, ch. 1].

Remove the square brackets to create an in-text citation: @smith04 says blah, or @smith04 [p. 33] says blah.

Add a - before the citation to suppress the author's name: Smith says blah [-@smith04].

You can change the style of your citations and bibliography by referencing a CSL (citation style language) file in the `csl` field:

`bibliography: rmarkdown.bib`

`csl: apa.csl`

# 8 Workflow

Earlier, we discussed a basic workflow for capturing your R code where you work interactively in the *console*, then capture what works in the *script editor*. Quarto brings together the console and the script editor, blurring the lines between interactive exploration and long-term code capture. You can rapidly iterate within a chunk, editing and re-executing with Cmd/Ctrl + Shift + Enter. When you’re happy, you move on and start a new chunk.

Quarto is also important because it so tightly integrates prose and code. This makes it a great **analysis notebook** because it lets you develop code and record your thoughts.
